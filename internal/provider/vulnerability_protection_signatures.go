package provider

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/sase-go"
	"github.com/paloaltonetworks/sase-go/api"
	uPZBYbs "github.com/paloaltonetworks/sase-go/netsec/schema/vulnerability/protection/signatures"
	utDbvHr "github.com/paloaltonetworks/sase-go/netsec/service/v1/vulnerabilityprotectionsignatures"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &vulnerabilityProtectionSignaturesListDataSource{}
	_ datasource.DataSourceWithConfigure = &vulnerabilityProtectionSignaturesListDataSource{}
)

func NewVulnerabilityProtectionSignaturesListDataSource() datasource.DataSource {
	return &vulnerabilityProtectionSignaturesListDataSource{}
}

type vulnerabilityProtectionSignaturesListDataSource struct {
	client *sase.Client
}

type vulnerabilityProtectionSignaturesListDsModel struct {
	Id types.String `tfsdk:"id"`

	// Input.
	Limit  types.Int64  `tfsdk:"limit"`
	Offset types.Int64  `tfsdk:"offset"`
	Name   types.String `tfsdk:"name"`
	Folder types.String `tfsdk:"folder"`

	// Output.
	Data []vulnerabilityProtectionSignaturesListDsModelConfig `tfsdk:"data"`
	// input omit: Limit
	// input omit: Offset
	Total types.Int64 `tfsdk:"total"`
}

type vulnerabilityProtectionSignaturesListDsModelConfig struct {
	AffectedHost  *vulnerabilityProtectionSignaturesListDsModelAffectedHostObject  `tfsdk:"affected_host"`
	Bugtraq       []types.String                                                   `tfsdk:"bugtraq"`
	Comment       types.String                                                     `tfsdk:"comment"`
	Cve           []types.String                                                   `tfsdk:"cve"`
	DefaultAction *vulnerabilityProtectionSignaturesListDsModelDefaultActionObject `tfsdk:"default_action"`
	Direction     types.String                                                     `tfsdk:"direction"`
	ObjectId      types.String                                                     `tfsdk:"object_id"`
	Reference     []types.String                                                   `tfsdk:"reference"`
	Severity      types.String                                                     `tfsdk:"severity"`
	Signature     *vulnerabilityProtectionSignaturesListDsModelSignatureObject     `tfsdk:"signature"`
	ThreatId      types.Int64                                                      `tfsdk:"threat_id"`
	Threatname    types.String                                                     `tfsdk:"threatname"`
	Vendor        []types.String                                                   `tfsdk:"vendor"`
}

type vulnerabilityProtectionSignaturesListDsModelAffectedHostObject struct {
	Client types.Bool `tfsdk:"client"`
	Server types.Bool `tfsdk:"server"`
}

type vulnerabilityProtectionSignaturesListDsModelDefaultActionObject struct {
	Alert       types.Bool                                                 `tfsdk:"alert"`
	Allow       types.Bool                                                 `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionSignaturesListDsModelBlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                                 `tfsdk:"drop"`
	ResetBoth   types.Bool                                                 `tfsdk:"reset_both"`
	ResetClient types.Bool                                                 `tfsdk:"reset_client"`
	ResetServer types.Bool                                                 `tfsdk:"reset_server"`
}

type vulnerabilityProtectionSignaturesListDsModelBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionSignaturesListDsModelSignatureObject struct {
	Combination *vulnerabilityProtectionSignaturesListDsModelCombinationObject `tfsdk:"combination"`
	Standard    []vulnerabilityProtectionSignaturesListDsModelStandardObject   `tfsdk:"standard"`
}

type vulnerabilityProtectionSignaturesListDsModelCombinationObject struct {
	AndCondition  []vulnerabilityProtectionSignaturesListDsModelAndConditionObject `tfsdk:"and_condition"`
	OrderFree     types.Bool                                                       `tfsdk:"order_free"`
	TimeAttribute *vulnerabilityProtectionSignaturesListDsModelTimeAttributeObject `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionSignaturesListDsModelAndConditionObject struct {
	Name        types.String                                                    `tfsdk:"name"`
	OrCondition []vulnerabilityProtectionSignaturesListDsModelOrConditionObject `tfsdk:"or_condition"`
}

type vulnerabilityProtectionSignaturesListDsModelOrConditionObject struct {
	Name     types.String `tfsdk:"name"`
	ThreatId types.String `tfsdk:"threat_id"`
}

type vulnerabilityProtectionSignaturesListDsModelTimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionSignaturesListDsModelStandardObject struct {
	AndCondition []vulnerabilityProtectionSignaturesListDsModelAndConditionObject `tfsdk:"and_condition"`
	Comment      types.String                                                     `tfsdk:"comment"`
	Name         types.String                                                     `tfsdk:"name"`
	OrderFree    types.Bool                                                       `tfsdk:"order_free"`
	Scope        types.String                                                     `tfsdk:"scope"`
}

// Metadata returns the data source type name.
func (d *vulnerabilityProtectionSignaturesListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_signatures_list"
}

// Schema defines the schema for this listing data source.
func (d *vulnerabilityProtectionSignaturesListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			"id": dsschema.StringAttribute{
				Description: "The object ID.",
				Computed:    true,
			},

			// Input.
			"limit": dsschema.Int64Attribute{
				Description: "The max count in result entry (count per page)",
				Optional:    true,
				Computed:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The offset of the result entry",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The name of the entry",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The folder of the entry",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Shared", "Mobile Users", "Remote Networks", "Service Connections", "Mobile Users Container", "Mobile Users Explicit Proxy"),
				},
			},

			// Output.
			"data": dsschema.ListNestedAttribute{
				Description: "",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						"affected_host": dsschema.SingleNestedAttribute{
							Description: "",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								"client": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"server": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
							},
						},
						"bugtraq": dsschema.ListAttribute{
							Description: "",
							Computed:    true,
							ElementType: types.StringType,
						},
						"comment": dsschema.StringAttribute{
							Description: "",
							Computed:    true,
						},
						"cve": dsschema.ListAttribute{
							Description: "",
							Computed:    true,
							ElementType: types.StringType,
						},
						"default_action": dsschema.SingleNestedAttribute{
							Description: "",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								"alert": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"allow": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description: "",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										"duration": dsschema.Int64Attribute{
											Description: "",
											Computed:    true,
										},
										"track_by": dsschema.StringAttribute{
											Description: "",
											Computed:    true,
										},
									},
								},
								"drop": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
							},
						},
						"direction": dsschema.StringAttribute{
							Description: "",
							Computed:    true,
						},
						"object_id": dsschema.StringAttribute{
							Description: "",
							Computed:    true,
						},
						"reference": dsschema.ListAttribute{
							Description: "",
							Computed:    true,
							ElementType: types.StringType,
						},
						"severity": dsschema.StringAttribute{
							Description: "",
							Computed:    true,
						},
						"signature": dsschema.SingleNestedAttribute{
							Description: "",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								"combination": dsschema.SingleNestedAttribute{
									Description: "",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										"and_condition": dsschema.ListNestedAttribute{
											Description: "",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													"name": dsschema.StringAttribute{
														Description: "",
														Computed:    true,
													},
													"or_condition": dsschema.ListNestedAttribute{
														Description: "",
														Computed:    true,
														NestedObject: dsschema.NestedAttributeObject{
															Attributes: map[string]dsschema.Attribute{
																"name": dsschema.StringAttribute{
																	Description: "",
																	Computed:    true,
																},
																"threat_id": dsschema.StringAttribute{
																	Description: "",
																	Computed:    true,
																},
															},
														},
													},
												},
											},
										},
										"order_free": dsschema.BoolAttribute{
											Description: "",
											Computed:    true,
										},
										"time_attribute": dsschema.SingleNestedAttribute{
											Description: "",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												"interval": dsschema.Int64Attribute{
													Description: "",
													Computed:    true,
												},
												"threshold": dsschema.Int64Attribute{
													Description: "",
													Computed:    true,
												},
												"track_by": dsschema.StringAttribute{
													Description: "",
													Computed:    true,
												},
											},
										},
									},
								},
								"standard": dsschema.ListNestedAttribute{
									Description: "",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											"and_condition": dsschema.ListNestedAttribute{
												Description: "",
												Computed:    true,
												NestedObject: dsschema.NestedAttributeObject{
													Attributes: map[string]dsschema.Attribute{
														"name": dsschema.StringAttribute{
															Description: "",
															Computed:    true,
														},
														"or_condition": dsschema.ListNestedAttribute{
															Description: "",
															Computed:    true,
															NestedObject: dsschema.NestedAttributeObject{
																Attributes: map[string]dsschema.Attribute{
																	"name": dsschema.StringAttribute{
																		Description: "",
																		Computed:    true,
																	},
																	"threat_id": dsschema.StringAttribute{
																		Description: "",
																		Computed:    true,
																	},
																},
															},
														},
													},
												},
											},
											"comment": dsschema.StringAttribute{
												Description: "",
												Computed:    true,
											},
											"name": dsschema.StringAttribute{
												Description: "",
												Computed:    true,
											},
											"order_free": dsschema.BoolAttribute{
												Description: "",
												Computed:    true,
											},
											"scope": dsschema.StringAttribute{
												Description: "",
												Computed:    true,
											},
										},
									},
								},
							},
						},
						"threat_id": dsschema.Int64Attribute{
							Description: "",
							Computed:    true,
						},
						"threatname": dsschema.StringAttribute{
							Description: "",
							Computed:    true,
						},
						"vendor": dsschema.ListAttribute{
							Description: "",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"total": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *vulnerabilityProtectionSignaturesListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sase.Client)
}

func (d *vulnerabilityProtectionSignaturesListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state vulnerabilityProtectionSignaturesListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name": "sase_vulnerability_protection_signatures_list",
		"limit":            state.Limit.ValueInt64(),
		"has_limit":        !state.Limit.IsNull(),
		"offset":           state.Offset.ValueInt64(),
		"has_offset":       !state.Offset.IsNull(),
		"name":             state.Name.ValueString(),
		"has_name":         !state.Name.IsNull(),
		"folder":           state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := utDbvHr.NewClient(d.client)
	input := utDbvHr.ListInput{
		Folder: state.Folder.ValueString(),
	}
	if !state.Limit.IsNull() {
		input.Limit = api.Int(state.Limit.ValueInt64())
	}
	if !state.Offset.IsNull() {
		input.Offset = api.Int(state.Offset.ValueInt64())
	}
	if !state.Name.IsNull() {
		input.Name = api.String(state.Name.ValueString())
	}

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Store the answer to state.
	var idBuilder strings.Builder
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	} else {
		idBuilder.WriteString("0")
	}
	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	} else {
		idBuilder.WriteString("0")
	}
	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}
	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)
	state.Id = types.StringValue(idBuilder.String())
	var var0 []vulnerabilityProtectionSignaturesListDsModelConfig
	if len(ans.Data) != 0 {
		var0 = make([]vulnerabilityProtectionSignaturesListDsModelConfig, 0, len(ans.Data))
		for var1Index := range ans.Data {
			var1 := ans.Data[var1Index]
			var var2 vulnerabilityProtectionSignaturesListDsModelConfig
			var var3 *vulnerabilityProtectionSignaturesListDsModelAffectedHostObject
			if var1.AffectedHost != nil {
				var3 = &vulnerabilityProtectionSignaturesListDsModelAffectedHostObject{}
				var3.Client = types.BoolValue(var1.AffectedHost.Client)
				var3.Server = types.BoolValue(var1.AffectedHost.Server)
			}
			var var4 *vulnerabilityProtectionSignaturesListDsModelDefaultActionObject
			if var1.DefaultAction != nil {
				var4 = &vulnerabilityProtectionSignaturesListDsModelDefaultActionObject{}
				var var5 *vulnerabilityProtectionSignaturesListDsModelBlockIpObject
				if var1.DefaultAction.BlockIp != nil {
					var5 = &vulnerabilityProtectionSignaturesListDsModelBlockIpObject{}
					var5.Duration = types.Int64Value(var1.DefaultAction.BlockIp.Duration)
					var5.TrackBy = types.StringValue(var1.DefaultAction.BlockIp.TrackBy)
				}
				if var1.DefaultAction.Alert != nil {
					var4.Alert = types.BoolValue(true)
				}
				if var1.DefaultAction.Allow != nil {
					var4.Allow = types.BoolValue(true)
				}
				var4.BlockIp = var5
				if var1.DefaultAction.Drop != nil {
					var4.Drop = types.BoolValue(true)
				}
				if var1.DefaultAction.ResetBoth != nil {
					var4.ResetBoth = types.BoolValue(true)
				}
				if var1.DefaultAction.ResetClient != nil {
					var4.ResetClient = types.BoolValue(true)
				}
				if var1.DefaultAction.ResetServer != nil {
					var4.ResetServer = types.BoolValue(true)
				}
			}
			var var6 *vulnerabilityProtectionSignaturesListDsModelSignatureObject
			if var1.Signature != nil {
				var6 = &vulnerabilityProtectionSignaturesListDsModelSignatureObject{}
				var var7 *vulnerabilityProtectionSignaturesListDsModelCombinationObject
				if var1.Signature.Combination != nil {
					var7 = &vulnerabilityProtectionSignaturesListDsModelCombinationObject{}
					var var8 []vulnerabilityProtectionSignaturesListDsModelAndConditionObject
					if len(var1.Signature.Combination.AndCondition) != 0 {
						var8 = make([]vulnerabilityProtectionSignaturesListDsModelAndConditionObject, 0, len(var1.Signature.Combination.AndCondition))
						for var9Index := range var1.Signature.Combination.AndCondition {
							var9 := var1.Signature.Combination.AndCondition[var9Index]
							var var10 vulnerabilityProtectionSignaturesListDsModelAndConditionObject
							var var11 []vulnerabilityProtectionSignaturesListDsModelOrConditionObject
							if len(var9.OrCondition) != 0 {
								var11 = make([]vulnerabilityProtectionSignaturesListDsModelOrConditionObject, 0, len(var9.OrCondition))
								for var12Index := range var9.OrCondition {
									var12 := var9.OrCondition[var12Index]
									var var13 vulnerabilityProtectionSignaturesListDsModelOrConditionObject
									var13.Name = types.StringValue(var12.Name)
									var13.ThreatId = types.StringValue(var12.ThreatId)
									var11 = append(var11, var13)
								}
							}
							var10.Name = types.StringValue(var9.Name)
							var10.OrCondition = var11
							var8 = append(var8, var10)
						}
					}
					var var14 *vulnerabilityProtectionSignaturesListDsModelTimeAttributeObject
					if var1.Signature.Combination.TimeAttribute != nil {
						var14 = &vulnerabilityProtectionSignaturesListDsModelTimeAttributeObject{}
						var14.Interval = types.Int64Value(var1.Signature.Combination.TimeAttribute.Interval)
						var14.Threshold = types.Int64Value(var1.Signature.Combination.TimeAttribute.Threshold)
						var14.TrackBy = types.StringValue(var1.Signature.Combination.TimeAttribute.TrackBy)
					}
					var7.AndCondition = var8
					var7.OrderFree = types.BoolValue(var1.Signature.Combination.OrderFree)
					var7.TimeAttribute = var14
				}
				var var15 []vulnerabilityProtectionSignaturesListDsModelStandardObject
				if len(var1.Signature.Standard) != 0 {
					var15 = make([]vulnerabilityProtectionSignaturesListDsModelStandardObject, 0, len(var1.Signature.Standard))
					for var16Index := range var1.Signature.Standard {
						var16 := var1.Signature.Standard[var16Index]
						var var17 vulnerabilityProtectionSignaturesListDsModelStandardObject
						var var18 []vulnerabilityProtectionSignaturesListDsModelAndConditionObject
						if len(var16.AndCondition) != 0 {
							var18 = make([]vulnerabilityProtectionSignaturesListDsModelAndConditionObject, 0, len(var16.AndCondition))
							for var19Index := range var16.AndCondition {
								var19 := var16.AndCondition[var19Index]
								var var20 vulnerabilityProtectionSignaturesListDsModelAndConditionObject
								var var21 []vulnerabilityProtectionSignaturesListDsModelOrConditionObject
								if len(var19.OrCondition) != 0 {
									var21 = make([]vulnerabilityProtectionSignaturesListDsModelOrConditionObject, 0, len(var19.OrCondition))
									for var22Index := range var19.OrCondition {
										var22 := var19.OrCondition[var22Index]
										var var23 vulnerabilityProtectionSignaturesListDsModelOrConditionObject
										var23.Name = types.StringValue(var22.Name)
										var23.ThreatId = types.StringValue(var22.ThreatId)
										var21 = append(var21, var23)
									}
								}
								var20.Name = types.StringValue(var19.Name)
								var20.OrCondition = var21
								var18 = append(var18, var20)
							}
						}
						var17.AndCondition = var18
						var17.Comment = types.StringValue(var16.Comment)
						var17.Name = types.StringValue(var16.Name)
						var17.OrderFree = types.BoolValue(var16.OrderFree)
						var17.Scope = types.StringValue(var16.Scope)
						var15 = append(var15, var17)
					}
				}
				var6.Combination = var7
				var6.Standard = var15
			}
			var2.AffectedHost = var3
			var2.Bugtraq = EncodeStringSlice(var1.Bugtraq)
			var2.Comment = types.StringValue(var1.Comment)
			var2.Cve = EncodeStringSlice(var1.Cve)
			var2.DefaultAction = var4
			var2.Direction = types.StringValue(var1.Direction)
			var2.ObjectId = types.StringValue(var1.ObjectId)
			var2.Reference = EncodeStringSlice(var1.Reference)
			var2.Severity = types.StringValue(var1.Severity)
			var2.Signature = var6
			var2.ThreatId = types.Int64Value(var1.ThreatId)
			var2.Threatname = types.StringValue(var1.Threatname)
			var2.Vendor = EncodeStringSlice(var1.Vendor)
			var0 = append(var0, var2)
		}
	}
	state.Data = var0
	if !state.Limit.IsNull() {
		state.Limit = types.Int64Value(ans.Limit)
	}
	if !state.Offset.IsNull() {
		state.Offset = types.Int64Value(ans.Offset)
	}
	state.Total = types.Int64Value(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &vulnerabilityProtectionSignaturesDataSource{}
	_ datasource.DataSourceWithConfigure = &vulnerabilityProtectionSignaturesDataSource{}
)

func NewVulnerabilityProtectionSignaturesDataSource() datasource.DataSource {
	return &vulnerabilityProtectionSignaturesDataSource{}
}

type vulnerabilityProtectionSignaturesDataSource struct {
	client *sase.Client
}

type vulnerabilityProtectionSignaturesDsModel struct {
	Id types.String `tfsdk:"id"`

	// Input.
	ObjectId types.String `tfsdk:"object_id"`

	// Output.
	// Ref: #/components/schemas/vulnerability-protection-signatures
	AffectedHost  *vulnerabilityProtectionSignaturesDsModelAffectedHostObject  `tfsdk:"affected_host"`
	Bugtraq       []types.String                                               `tfsdk:"bugtraq"`
	Comment       types.String                                                 `tfsdk:"comment"`
	Cve           []types.String                                               `tfsdk:"cve"`
	DefaultAction *vulnerabilityProtectionSignaturesDsModelDefaultActionObject `tfsdk:"default_action"`
	Direction     types.String                                                 `tfsdk:"direction"`
	// input omit: ObjectId
	Reference  []types.String                                           `tfsdk:"reference"`
	Severity   types.String                                             `tfsdk:"severity"`
	Signature  *vulnerabilityProtectionSignaturesDsModelSignatureObject `tfsdk:"signature"`
	ThreatId   types.Int64                                              `tfsdk:"threat_id"`
	Threatname types.String                                             `tfsdk:"threatname"`
	Vendor     []types.String                                           `tfsdk:"vendor"`
}

type vulnerabilityProtectionSignaturesDsModelAffectedHostObject struct {
	Client types.Bool `tfsdk:"client"`
	Server types.Bool `tfsdk:"server"`
}

type vulnerabilityProtectionSignaturesDsModelDefaultActionObject struct {
	Alert       types.Bool                                             `tfsdk:"alert"`
	Allow       types.Bool                                             `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionSignaturesDsModelBlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                             `tfsdk:"drop"`
	ResetBoth   types.Bool                                             `tfsdk:"reset_both"`
	ResetClient types.Bool                                             `tfsdk:"reset_client"`
	ResetServer types.Bool                                             `tfsdk:"reset_server"`
}

type vulnerabilityProtectionSignaturesDsModelBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionSignaturesDsModelSignatureObject struct {
	Combination *vulnerabilityProtectionSignaturesDsModelCombinationObject `tfsdk:"combination"`
	Standard    []vulnerabilityProtectionSignaturesDsModelStandardObject   `tfsdk:"standard"`
}

type vulnerabilityProtectionSignaturesDsModelCombinationObject struct {
	AndCondition  []vulnerabilityProtectionSignaturesDsModelAndConditionObject `tfsdk:"and_condition"`
	OrderFree     types.Bool                                                   `tfsdk:"order_free"`
	TimeAttribute *vulnerabilityProtectionSignaturesDsModelTimeAttributeObject `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionSignaturesDsModelAndConditionObject struct {
	Name        types.String                                                `tfsdk:"name"`
	OrCondition []vulnerabilityProtectionSignaturesDsModelOrConditionObject `tfsdk:"or_condition"`
}

type vulnerabilityProtectionSignaturesDsModelOrConditionObject struct {
	Name     types.String `tfsdk:"name"`
	ThreatId types.String `tfsdk:"threat_id"`
}

type vulnerabilityProtectionSignaturesDsModelTimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionSignaturesDsModelStandardObject struct {
	AndCondition []vulnerabilityProtectionSignaturesDsModelAndConditionObject `tfsdk:"and_condition"`
	Comment      types.String                                                 `tfsdk:"comment"`
	Name         types.String                                                 `tfsdk:"name"`
	OrderFree    types.Bool                                                   `tfsdk:"order_free"`
	Scope        types.String                                                 `tfsdk:"scope"`
}

// Metadata returns the data source type name.
func (d *vulnerabilityProtectionSignaturesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_signatures"
}

// Schema defines the schema for this listing data source.
func (d *vulnerabilityProtectionSignaturesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves config for a specific item.",

		Attributes: map[string]dsschema.Attribute{
			"id": dsschema.StringAttribute{
				Description: "The object ID.",
				Computed:    true,
			},

			// Input.
			"object_id": dsschema.StringAttribute{
				Description: "The uuid of the resource",
				Required:    true,
			},

			// Output.
			"affected_host": dsschema.SingleNestedAttribute{
				Description: "",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					"client": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
					"server": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
				},
			},
			"bugtraq": dsschema.ListAttribute{
				Description: "",
				Computed:    true,
				ElementType: types.StringType,
			},
			"comment": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
			},
			"cve": dsschema.ListAttribute{
				Description: "",
				Computed:    true,
				ElementType: types.StringType,
			},
			"default_action": dsschema.SingleNestedAttribute{
				Description: "",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					"alert": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
					"allow": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
					"block_ip": dsschema.SingleNestedAttribute{
						Description: "",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							"duration": dsschema.Int64Attribute{
								Description: "",
								Computed:    true,
							},
							"track_by": dsschema.StringAttribute{
								Description: "",
								Computed:    true,
							},
						},
					},
					"drop": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
					"reset_both": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
					"reset_client": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
					"reset_server": dsschema.BoolAttribute{
						Description: "",
						Computed:    true,
					},
				},
			},
			"direction": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
			},
			"reference": dsschema.ListAttribute{
				Description: "",
				Computed:    true,
				ElementType: types.StringType,
			},
			"severity": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
			},
			"signature": dsschema.SingleNestedAttribute{
				Description: "",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					"combination": dsschema.SingleNestedAttribute{
						Description: "",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							"and_condition": dsschema.ListNestedAttribute{
								Description: "",
								Computed:    true,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										"name": dsschema.StringAttribute{
											Description: "",
											Computed:    true,
										},
										"or_condition": dsschema.ListNestedAttribute{
											Description: "",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													"name": dsschema.StringAttribute{
														Description: "",
														Computed:    true,
													},
													"threat_id": dsschema.StringAttribute{
														Description: "",
														Computed:    true,
													},
												},
											},
										},
									},
								},
							},
							"order_free": dsschema.BoolAttribute{
								Description: "",
								Computed:    true,
							},
							"time_attribute": dsschema.SingleNestedAttribute{
								Description: "",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									"interval": dsschema.Int64Attribute{
										Description: "",
										Computed:    true,
									},
									"threshold": dsschema.Int64Attribute{
										Description: "",
										Computed:    true,
									},
									"track_by": dsschema.StringAttribute{
										Description: "",
										Computed:    true,
									},
								},
							},
						},
					},
					"standard": dsschema.ListNestedAttribute{
						Description: "",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								"and_condition": dsschema.ListNestedAttribute{
									Description: "",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											"name": dsschema.StringAttribute{
												Description: "",
												Computed:    true,
											},
											"or_condition": dsschema.ListNestedAttribute{
												Description: "",
												Computed:    true,
												NestedObject: dsschema.NestedAttributeObject{
													Attributes: map[string]dsschema.Attribute{
														"name": dsschema.StringAttribute{
															Description: "",
															Computed:    true,
														},
														"threat_id": dsschema.StringAttribute{
															Description: "",
															Computed:    true,
														},
													},
												},
											},
										},
									},
								},
								"comment": dsschema.StringAttribute{
									Description: "",
									Computed:    true,
								},
								"name": dsschema.StringAttribute{
									Description: "",
									Computed:    true,
								},
								"order_free": dsschema.BoolAttribute{
									Description: "",
									Computed:    true,
								},
								"scope": dsschema.StringAttribute{
									Description: "",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"threat_id": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
			},
			"threatname": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
			},
			"vendor": dsschema.ListAttribute{
				Description: "",
				Computed:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (d *vulnerabilityProtectionSignaturesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sase.Client)
}

func (d *vulnerabilityProtectionSignaturesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state vulnerabilityProtectionSignaturesDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name": "sase_vulnerability_protection_signatures",
		"object_id":        state.ObjectId.ValueString(),
	})

	// Prepare to run the command.
	svc := utDbvHr.NewClient(d.client)
	input := utDbvHr.ReadInput{
		ObjectId: state.ObjectId.ValueString(),
	}

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting singleton", err.Error())
		return
	}

	// Store the answer to state.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ObjectId)
	state.Id = types.StringValue(idBuilder.String())
	var var0 *vulnerabilityProtectionSignaturesDsModelAffectedHostObject
	if ans.AffectedHost != nil {
		var0 = &vulnerabilityProtectionSignaturesDsModelAffectedHostObject{}
		var0.Client = types.BoolValue(ans.AffectedHost.Client)
		var0.Server = types.BoolValue(ans.AffectedHost.Server)
	}
	var var1 *vulnerabilityProtectionSignaturesDsModelDefaultActionObject
	if ans.DefaultAction != nil {
		var1 = &vulnerabilityProtectionSignaturesDsModelDefaultActionObject{}
		var var2 *vulnerabilityProtectionSignaturesDsModelBlockIpObject
		if ans.DefaultAction.BlockIp != nil {
			var2 = &vulnerabilityProtectionSignaturesDsModelBlockIpObject{}
			var2.Duration = types.Int64Value(ans.DefaultAction.BlockIp.Duration)
			var2.TrackBy = types.StringValue(ans.DefaultAction.BlockIp.TrackBy)
		}
		if ans.DefaultAction.Alert != nil {
			var1.Alert = types.BoolValue(true)
		}
		if ans.DefaultAction.Allow != nil {
			var1.Allow = types.BoolValue(true)
		}
		var1.BlockIp = var2
		if ans.DefaultAction.Drop != nil {
			var1.Drop = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetBoth != nil {
			var1.ResetBoth = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetClient != nil {
			var1.ResetClient = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetServer != nil {
			var1.ResetServer = types.BoolValue(true)
		}
	}
	var var3 *vulnerabilityProtectionSignaturesDsModelSignatureObject
	if ans.Signature != nil {
		var3 = &vulnerabilityProtectionSignaturesDsModelSignatureObject{}
		var var4 *vulnerabilityProtectionSignaturesDsModelCombinationObject
		if ans.Signature.Combination != nil {
			var4 = &vulnerabilityProtectionSignaturesDsModelCombinationObject{}
			var var5 []vulnerabilityProtectionSignaturesDsModelAndConditionObject
			if len(ans.Signature.Combination.AndCondition) != 0 {
				var5 = make([]vulnerabilityProtectionSignaturesDsModelAndConditionObject, 0, len(ans.Signature.Combination.AndCondition))
				for var6Index := range ans.Signature.Combination.AndCondition {
					var6 := ans.Signature.Combination.AndCondition[var6Index]
					var var7 vulnerabilityProtectionSignaturesDsModelAndConditionObject
					var var8 []vulnerabilityProtectionSignaturesDsModelOrConditionObject
					if len(var6.OrCondition) != 0 {
						var8 = make([]vulnerabilityProtectionSignaturesDsModelOrConditionObject, 0, len(var6.OrCondition))
						for var9Index := range var6.OrCondition {
							var9 := var6.OrCondition[var9Index]
							var var10 vulnerabilityProtectionSignaturesDsModelOrConditionObject
							var10.Name = types.StringValue(var9.Name)
							var10.ThreatId = types.StringValue(var9.ThreatId)
							var8 = append(var8, var10)
						}
					}
					var7.Name = types.StringValue(var6.Name)
					var7.OrCondition = var8
					var5 = append(var5, var7)
				}
			}
			var var11 *vulnerabilityProtectionSignaturesDsModelTimeAttributeObject
			if ans.Signature.Combination.TimeAttribute != nil {
				var11 = &vulnerabilityProtectionSignaturesDsModelTimeAttributeObject{}
				var11.Interval = types.Int64Value(ans.Signature.Combination.TimeAttribute.Interval)
				var11.Threshold = types.Int64Value(ans.Signature.Combination.TimeAttribute.Threshold)
				var11.TrackBy = types.StringValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
			var4.AndCondition = var5
			var4.OrderFree = types.BoolValue(ans.Signature.Combination.OrderFree)
			var4.TimeAttribute = var11
		}
		var var12 []vulnerabilityProtectionSignaturesDsModelStandardObject
		if len(ans.Signature.Standard) != 0 {
			var12 = make([]vulnerabilityProtectionSignaturesDsModelStandardObject, 0, len(ans.Signature.Standard))
			for var13Index := range ans.Signature.Standard {
				var13 := ans.Signature.Standard[var13Index]
				var var14 vulnerabilityProtectionSignaturesDsModelStandardObject
				var var15 []vulnerabilityProtectionSignaturesDsModelAndConditionObject
				if len(var13.AndCondition) != 0 {
					var15 = make([]vulnerabilityProtectionSignaturesDsModelAndConditionObject, 0, len(var13.AndCondition))
					for var16Index := range var13.AndCondition {
						var16 := var13.AndCondition[var16Index]
						var var17 vulnerabilityProtectionSignaturesDsModelAndConditionObject
						var var18 []vulnerabilityProtectionSignaturesDsModelOrConditionObject
						if len(var16.OrCondition) != 0 {
							var18 = make([]vulnerabilityProtectionSignaturesDsModelOrConditionObject, 0, len(var16.OrCondition))
							for var19Index := range var16.OrCondition {
								var19 := var16.OrCondition[var19Index]
								var var20 vulnerabilityProtectionSignaturesDsModelOrConditionObject
								var20.Name = types.StringValue(var19.Name)
								var20.ThreatId = types.StringValue(var19.ThreatId)
								var18 = append(var18, var20)
							}
						}
						var17.Name = types.StringValue(var16.Name)
						var17.OrCondition = var18
						var15 = append(var15, var17)
					}
				}
				var14.AndCondition = var15
				var14.Comment = types.StringValue(var13.Comment)
				var14.Name = types.StringValue(var13.Name)
				var14.OrderFree = types.BoolValue(var13.OrderFree)
				var14.Scope = types.StringValue(var13.Scope)
				var12 = append(var12, var14)
			}
		}
		var3.Combination = var4
		var3.Standard = var12
	}
	state.AffectedHost = var0
	state.Bugtraq = EncodeStringSlice(ans.Bugtraq)
	state.Comment = types.StringValue(ans.Comment)
	state.Cve = EncodeStringSlice(ans.Cve)
	state.DefaultAction = var1
	state.Direction = types.StringValue(ans.Direction)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Reference = EncodeStringSlice(ans.Reference)
	state.Severity = types.StringValue(ans.Severity)
	state.Signature = var3
	state.ThreatId = types.Int64Value(ans.ThreatId)
	state.Threatname = types.StringValue(ans.Threatname)
	state.Vendor = EncodeStringSlice(ans.Vendor)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &vulnerabilityProtectionSignaturesResource{}
	_ resource.ResourceWithConfigure   = &vulnerabilityProtectionSignaturesResource{}
	_ resource.ResourceWithImportState = &vulnerabilityProtectionSignaturesResource{}
)

func NewVulnerabilityProtectionSignaturesResource() resource.Resource {
	return &vulnerabilityProtectionSignaturesResource{}
}

type vulnerabilityProtectionSignaturesResource struct {
	client *sase.Client
}

type vulnerabilityProtectionSignaturesRsModel struct {
	Id types.String `tfsdk:"id"`

	// Input.
	Folder types.String `tfsdk:"folder"`

	// Request body input.
	// Ref: #/components/schemas/vulnerability-protection-signatures
	AffectedHost  *vulnerabilityProtectionSignaturesRsModelAffectedHostObject  `tfsdk:"affected_host"`
	Bugtraq       []types.String                                               `tfsdk:"bugtraq"`
	Comment       types.String                                                 `tfsdk:"comment"`
	Cve           []types.String                                               `tfsdk:"cve"`
	DefaultAction *vulnerabilityProtectionSignaturesRsModelDefaultActionObject `tfsdk:"default_action"`
	Direction     types.String                                                 `tfsdk:"direction"`
	ObjectId      types.String                                                 `tfsdk:"object_id"`
	Reference     []types.String                                               `tfsdk:"reference"`
	Severity      types.String                                                 `tfsdk:"severity"`
	Signature     *vulnerabilityProtectionSignaturesRsModelSignatureObject     `tfsdk:"signature"`
	ThreatId      types.Int64                                                  `tfsdk:"threat_id"`
	Threatname    types.String                                                 `tfsdk:"threatname"`
	Vendor        []types.String                                               `tfsdk:"vendor"`
}

type vulnerabilityProtectionSignaturesRsModelAffectedHostObject struct {
	Client types.Bool `tfsdk:"client"`
	Server types.Bool `tfsdk:"server"`
}

type vulnerabilityProtectionSignaturesRsModelDefaultActionObject struct {
	Alert       types.Bool                                             `tfsdk:"alert"`
	Allow       types.Bool                                             `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionSignaturesRsModelBlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                             `tfsdk:"drop"`
	ResetBoth   types.Bool                                             `tfsdk:"reset_both"`
	ResetClient types.Bool                                             `tfsdk:"reset_client"`
	ResetServer types.Bool                                             `tfsdk:"reset_server"`
}

type vulnerabilityProtectionSignaturesRsModelBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionSignaturesRsModelSignatureObject struct {
	Combination *vulnerabilityProtectionSignaturesRsModelCombinationObject `tfsdk:"combination"`
	Standard    []vulnerabilityProtectionSignaturesRsModelStandardObject   `tfsdk:"standard"`
}

type vulnerabilityProtectionSignaturesRsModelCombinationObject struct {
	AndCondition  []vulnerabilityProtectionSignaturesRsModelAndConditionObject `tfsdk:"and_condition"`
	OrderFree     types.Bool                                                   `tfsdk:"order_free"`
	TimeAttribute *vulnerabilityProtectionSignaturesRsModelTimeAttributeObject `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionSignaturesRsModelAndConditionObject struct {
	Name        types.String                                                `tfsdk:"name"`
	OrCondition []vulnerabilityProtectionSignaturesRsModelOrConditionObject `tfsdk:"or_condition"`
}

type vulnerabilityProtectionSignaturesRsModelOrConditionObject struct {
	Name     types.String `tfsdk:"name"`
	ThreatId types.String `tfsdk:"threat_id"`
}

type vulnerabilityProtectionSignaturesRsModelTimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionSignaturesRsModelStandardObject struct {
	AndCondition []vulnerabilityProtectionSignaturesRsModelAndConditionObject `tfsdk:"and_condition"`
	Comment      types.String                                                 `tfsdk:"comment"`
	Name         types.String                                                 `tfsdk:"name"`
	OrderFree    types.Bool                                                   `tfsdk:"order_free"`
	Scope        types.String                                                 `tfsdk:"scope"`
}

// Metadata returns the data source type name.
func (r *vulnerabilityProtectionSignaturesResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_signatures"
}

// Schema defines the schema for this listing data source.
func (r *vulnerabilityProtectionSignaturesResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves config for a specific item.",

		Attributes: map[string]rsschema.Attribute{
			"id": rsschema.StringAttribute{
				Description: "The object ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			// Input.
			"folder": rsschema.StringAttribute{
				Description: "The folder of the entry",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Shared", "Mobile Users", "Remote Networks", "Service Connections", "Mobile Users Container", "Mobile Users Explicit Proxy"),
				},
			},

			"affected_host": rsschema.SingleNestedAttribute{
				Description: "",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"client": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Bool{
							DefaultBool(false),
						},
					},
					"server": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Bool{
							DefaultBool(false),
						},
					},
				},
			},
			"bugtraq": rsschema.ListAttribute{
				Description: "",
				Optional:    true,
				ElementType: types.StringType,
			},
			"comment": rsschema.StringAttribute{
				Description: "",
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					DefaultString(""),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},
			"cve": rsschema.ListAttribute{
				Description: "",
				Optional:    true,
				ElementType: types.StringType,
			},
			"default_action": rsschema.SingleNestedAttribute{
				Description: "",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"alert": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
					},
					"allow": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
					},
					"block_ip": rsschema.SingleNestedAttribute{
						Description: "",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							"duration": rsschema.Int64Attribute{
								Description: "",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{
									DefaultInt64(0),
								},
								Validators: []validator.Int64{
									int64validator.Between(1, 3600),
								},
							},
							"track_by": rsschema.StringAttribute{
								Description: "",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{
									DefaultString(""),
								},
								Validators: []validator.String{
									stringvalidator.OneOf("source-and-destination", "source"),
								},
							},
						},
					},
					"drop": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
					},
					"reset_both": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
					},
					"reset_client": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
					},
					"reset_server": rsschema.BoolAttribute{
						Description: "",
						Optional:    true,
					},
				},
			},
			"direction": rsschema.StringAttribute{
				Description: "",
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					DefaultString(""),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("client2server", "server2client", "both"),
				},
			},
			"object_id": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"reference": rsschema.ListAttribute{
				Description: "",
				Optional:    true,
				ElementType: types.StringType,
			},
			"severity": rsschema.StringAttribute{
				Description: "",
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					DefaultString(""),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("critical", "low", "high", "medium", "informational"),
				},
			},
			"signature": rsschema.SingleNestedAttribute{
				Description: "",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"combination": rsschema.SingleNestedAttribute{
						Description: "",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							"and_condition": rsschema.ListNestedAttribute{
								Description: "",
								Optional:    true,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										"name": rsschema.StringAttribute{
											Description: "",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.String{
												DefaultString(""),
											},
										},
										"or_condition": rsschema.ListNestedAttribute{
											Description: "",
											Optional:    true,
											NestedObject: rsschema.NestedAttributeObject{
												Attributes: map[string]rsschema.Attribute{
													"name": rsschema.StringAttribute{
														Description: "",
														Optional:    true,
														Computed:    true,
														PlanModifiers: []planmodifier.String{
															DefaultString(""),
														},
													},
													"threat_id": rsschema.StringAttribute{
														Description: "",
														Optional:    true,
														Computed:    true,
														PlanModifiers: []planmodifier.String{
															DefaultString(""),
														},
													},
												},
											},
										},
									},
								},
							},
							"order_free": rsschema.BoolAttribute{
								Description: "",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{
									DefaultBool(false),
								},
							},
							"time_attribute": rsschema.SingleNestedAttribute{
								Description: "",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									"interval": rsschema.Int64Attribute{
										Description: "",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{
											DefaultInt64(0),
										},
										Validators: []validator.Int64{
											int64validator.Between(1, 3600),
										},
									},
									"threshold": rsschema.Int64Attribute{
										Description: "",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{
											DefaultInt64(0),
										},
										Validators: []validator.Int64{
											int64validator.Between(1, 255),
										},
									},
									"track_by": rsschema.StringAttribute{
										Description: "",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{
											DefaultString(""),
										},
										Validators: []validator.String{
											stringvalidator.OneOf("source-and-destination", "source", "destination"),
										},
									},
								},
							},
						},
					},
					"standard": rsschema.ListNestedAttribute{
						Description: "",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								"and_condition": rsschema.ListNestedAttribute{
									Description: "",
									Optional:    true,
									NestedObject: rsschema.NestedAttributeObject{
										Attributes: map[string]rsschema.Attribute{
											"name": rsschema.StringAttribute{
												Description: "",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.String{
													DefaultString(""),
												},
											},
											"or_condition": rsschema.ListNestedAttribute{
												Description: "",
												Optional:    true,
												NestedObject: rsschema.NestedAttributeObject{
													Attributes: map[string]rsschema.Attribute{
														"name": rsschema.StringAttribute{
															Description: "",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.String{
																DefaultString(""),
															},
														},
														"threat_id": rsschema.StringAttribute{
															Description: "",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.String{
																DefaultString(""),
															},
														},
													},
												},
											},
										},
									},
								},
								"comment": rsschema.StringAttribute{
									Description: "",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{
										DefaultString(""),
									},
									Validators: []validator.String{
										stringvalidator.LengthBetween(0, 256),
									},
								},
								"name": rsschema.StringAttribute{
									Description: "",
									Required:    true,
									PlanModifiers: []planmodifier.String{
										DefaultString(""),
									},
								},
								"order_free": rsschema.BoolAttribute{
									Description: "",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Bool{
										DefaultBool(false),
									},
								},
								"scope": rsschema.StringAttribute{
									Description: "",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{
										DefaultString(""),
									},
									Validators: []validator.String{
										stringvalidator.OneOf("protocol-data-unit", "session"),
									},
								},
							},
						},
					},
				},
			},
			"threat_id": rsschema.Int64Attribute{
				Description: "",
				Required:    true,
				PlanModifiers: []planmodifier.Int64{
					DefaultInt64(0),
				},
				Validators: []validator.Int64{
					int64validator.Between(41000, 6900000),
				},
			},
			"threatname": rsschema.StringAttribute{
				Description: "",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					DefaultString(""),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1024),
				},
			},
			"vendor": rsschema.ListAttribute{
				Description: "",
				Optional:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (r *vulnerabilityProtectionSignaturesResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sase.Client)
}

// Create resource
func (r *vulnerabilityProtectionSignaturesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state vulnerabilityProtectionSignaturesRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "sase_vulnerability_protection_signatures",
		"folder":        state.Folder.ValueString(),
	})

	// Prepare to create the config.
	svc := utDbvHr.NewClient(r.client)
	input := utDbvHr.CreateInput{
		Folder: state.Folder.ValueString(),
	}
	var var0 uPZBYbs.Config
	var var1 *uPZBYbs.AffectedHostObject
	if state.AffectedHost != nil {
		var1 = &uPZBYbs.AffectedHostObject{}
		var1.Client = state.AffectedHost.Client.ValueBool()
		var1.Server = state.AffectedHost.Server.ValueBool()
	}
	var0.AffectedHost = var1
	var0.Bugtraq = DecodeStringSlice(state.Bugtraq)
	var0.Comment = state.Comment.ValueString()
	var0.Cve = DecodeStringSlice(state.Cve)
	var var2 *uPZBYbs.DefaultActionObject
	if state.DefaultAction != nil {
		var2 = &uPZBYbs.DefaultActionObject{}
		if state.DefaultAction.Alert.ValueBool() {
			var2.Alert = struct{}{}
		}
		if state.DefaultAction.Allow.ValueBool() {
			var2.Allow = struct{}{}
		}
		var var3 *uPZBYbs.BlockIpObject
		if state.DefaultAction.BlockIp != nil {
			var3 = &uPZBYbs.BlockIpObject{}
			var3.Duration = state.DefaultAction.BlockIp.Duration.ValueInt64()
			var3.TrackBy = state.DefaultAction.BlockIp.TrackBy.ValueString()
		}
		var2.BlockIp = var3
		if state.DefaultAction.Drop.ValueBool() {
			var2.Drop = struct{}{}
		}
		if state.DefaultAction.ResetBoth.ValueBool() {
			var2.ResetBoth = struct{}{}
		}
		if state.DefaultAction.ResetClient.ValueBool() {
			var2.ResetClient = struct{}{}
		}
		if state.DefaultAction.ResetServer.ValueBool() {
			var2.ResetServer = struct{}{}
		}
	}
	var0.DefaultAction = var2
	var0.Direction = state.Direction.ValueString()
	var0.Reference = DecodeStringSlice(state.Reference)
	var0.Severity = state.Severity.ValueString()
	var var4 *uPZBYbs.SignatureObject
	if state.Signature != nil {
		var4 = &uPZBYbs.SignatureObject{}
		var var5 *uPZBYbs.CombinationObject
		if state.Signature.Combination != nil {
			var5 = &uPZBYbs.CombinationObject{}
			var var6 []uPZBYbs.AndConditionObject
			if len(state.Signature.Combination.AndCondition) != 0 {
				var6 = make([]uPZBYbs.AndConditionObject, 0, len(state.Signature.Combination.AndCondition))
				for var7Index := range state.Signature.Combination.AndCondition {
					var7 := state.Signature.Combination.AndCondition[var7Index]
					var var8 uPZBYbs.AndConditionObject
					var8.Name = var7.Name.ValueString()
					var var9 []uPZBYbs.OrConditionObject
					if len(var7.OrCondition) != 0 {
						var9 = make([]uPZBYbs.OrConditionObject, 0, len(var7.OrCondition))
						for var10Index := range var7.OrCondition {
							var10 := var7.OrCondition[var10Index]
							var var11 uPZBYbs.OrConditionObject
							var11.Name = var10.Name.ValueString()
							var11.ThreatId = var10.ThreatId.ValueString()
							var9 = append(var9, var11)
						}
					}
					var8.OrCondition = var9
					var6 = append(var6, var8)
				}
			}
			var5.AndCondition = var6
			var5.OrderFree = state.Signature.Combination.OrderFree.ValueBool()
			var var12 *uPZBYbs.TimeAttributeObject
			if state.Signature.Combination.TimeAttribute != nil {
				var12 = &uPZBYbs.TimeAttributeObject{}
				var12.Interval = state.Signature.Combination.TimeAttribute.Interval.ValueInt64()
				var12.Threshold = state.Signature.Combination.TimeAttribute.Threshold.ValueInt64()
				var12.TrackBy = state.Signature.Combination.TimeAttribute.TrackBy.ValueString()
			}
			var5.TimeAttribute = var12
		}
		var4.Combination = var5
		var var13 []uPZBYbs.StandardObject
		if len(state.Signature.Standard) != 0 {
			var13 = make([]uPZBYbs.StandardObject, 0, len(state.Signature.Standard))
			for var14Index := range state.Signature.Standard {
				var14 := state.Signature.Standard[var14Index]
				var var15 uPZBYbs.StandardObject
				var var16 []uPZBYbs.AndConditionObject
				if len(var14.AndCondition) != 0 {
					var16 = make([]uPZBYbs.AndConditionObject, 0, len(var14.AndCondition))
					for var17Index := range var14.AndCondition {
						var17 := var14.AndCondition[var17Index]
						var var18 uPZBYbs.AndConditionObject
						var18.Name = var17.Name.ValueString()
						var var19 []uPZBYbs.OrConditionObject
						if len(var17.OrCondition) != 0 {
							var19 = make([]uPZBYbs.OrConditionObject, 0, len(var17.OrCondition))
							for var20Index := range var17.OrCondition {
								var20 := var17.OrCondition[var20Index]
								var var21 uPZBYbs.OrConditionObject
								var21.Name = var20.Name.ValueString()
								var21.ThreatId = var20.ThreatId.ValueString()
								var19 = append(var19, var21)
							}
						}
						var18.OrCondition = var19
						var16 = append(var16, var18)
					}
				}
				var15.AndCondition = var16
				var15.Comment = var14.Comment.ValueString()
				var15.Name = var14.Name.ValueString()
				var15.OrderFree = var14.OrderFree.ValueBool()
				var15.Scope = var14.Scope.ValueString()
				var13 = append(var13, var15)
			}
		}
		var4.Standard = var13
	}
	var0.Signature = var4
	var0.ThreatId = state.ThreatId.ValueInt64()
	var0.Threatname = state.Threatname.ValueString()
	var0.Vendor = DecodeStringSlice(state.Vendor)
	input.Config = var0

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Store the answer to state.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)
	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(ans.ObjectId)
	state.Id = types.StringValue(idBuilder.String())
	var var22 *vulnerabilityProtectionSignaturesRsModelAffectedHostObject
	if ans.AffectedHost != nil {
		var22 = &vulnerabilityProtectionSignaturesRsModelAffectedHostObject{}
		var22.Client = types.BoolValue(ans.AffectedHost.Client)
		var22.Server = types.BoolValue(ans.AffectedHost.Server)
	}
	var var23 *vulnerabilityProtectionSignaturesRsModelDefaultActionObject
	if ans.DefaultAction != nil {
		var23 = &vulnerabilityProtectionSignaturesRsModelDefaultActionObject{}
		var var24 *vulnerabilityProtectionSignaturesRsModelBlockIpObject
		if ans.DefaultAction.BlockIp != nil {
			var24 = &vulnerabilityProtectionSignaturesRsModelBlockIpObject{}
			var24.Duration = types.Int64Value(ans.DefaultAction.BlockIp.Duration)
			var24.TrackBy = types.StringValue(ans.DefaultAction.BlockIp.TrackBy)
		}
		if ans.DefaultAction.Alert != nil {
			var23.Alert = types.BoolValue(true)
		}
		if ans.DefaultAction.Allow != nil {
			var23.Allow = types.BoolValue(true)
		}
		var23.BlockIp = var24
		if ans.DefaultAction.Drop != nil {
			var23.Drop = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetBoth != nil {
			var23.ResetBoth = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetClient != nil {
			var23.ResetClient = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetServer != nil {
			var23.ResetServer = types.BoolValue(true)
		}
	}
	var var25 *vulnerabilityProtectionSignaturesRsModelSignatureObject
	if ans.Signature != nil {
		var25 = &vulnerabilityProtectionSignaturesRsModelSignatureObject{}
		var var26 *vulnerabilityProtectionSignaturesRsModelCombinationObject
		if ans.Signature.Combination != nil {
			var26 = &vulnerabilityProtectionSignaturesRsModelCombinationObject{}
			var var27 []vulnerabilityProtectionSignaturesRsModelAndConditionObject
			if len(ans.Signature.Combination.AndCondition) != 0 {
				var27 = make([]vulnerabilityProtectionSignaturesRsModelAndConditionObject, 0, len(ans.Signature.Combination.AndCondition))
				for var28Index := range ans.Signature.Combination.AndCondition {
					var28 := ans.Signature.Combination.AndCondition[var28Index]
					var var29 vulnerabilityProtectionSignaturesRsModelAndConditionObject
					var var30 []vulnerabilityProtectionSignaturesRsModelOrConditionObject
					if len(var28.OrCondition) != 0 {
						var30 = make([]vulnerabilityProtectionSignaturesRsModelOrConditionObject, 0, len(var28.OrCondition))
						for var31Index := range var28.OrCondition {
							var31 := var28.OrCondition[var31Index]
							var var32 vulnerabilityProtectionSignaturesRsModelOrConditionObject
							var32.Name = types.StringValue(var31.Name)
							var32.ThreatId = types.StringValue(var31.ThreatId)
							var30 = append(var30, var32)
						}
					}
					var29.Name = types.StringValue(var28.Name)
					var29.OrCondition = var30
					var27 = append(var27, var29)
				}
			}
			var var33 *vulnerabilityProtectionSignaturesRsModelTimeAttributeObject
			if ans.Signature.Combination.TimeAttribute != nil {
				var33 = &vulnerabilityProtectionSignaturesRsModelTimeAttributeObject{}
				var33.Interval = types.Int64Value(ans.Signature.Combination.TimeAttribute.Interval)
				var33.Threshold = types.Int64Value(ans.Signature.Combination.TimeAttribute.Threshold)
				var33.TrackBy = types.StringValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
			var26.AndCondition = var27
			var26.OrderFree = types.BoolValue(ans.Signature.Combination.OrderFree)
			var26.TimeAttribute = var33
		}
		var var34 []vulnerabilityProtectionSignaturesRsModelStandardObject
		if len(ans.Signature.Standard) != 0 {
			var34 = make([]vulnerabilityProtectionSignaturesRsModelStandardObject, 0, len(ans.Signature.Standard))
			for var35Index := range ans.Signature.Standard {
				var35 := ans.Signature.Standard[var35Index]
				var var36 vulnerabilityProtectionSignaturesRsModelStandardObject
				var var37 []vulnerabilityProtectionSignaturesRsModelAndConditionObject
				if len(var35.AndCondition) != 0 {
					var37 = make([]vulnerabilityProtectionSignaturesRsModelAndConditionObject, 0, len(var35.AndCondition))
					for var38Index := range var35.AndCondition {
						var38 := var35.AndCondition[var38Index]
						var var39 vulnerabilityProtectionSignaturesRsModelAndConditionObject
						var var40 []vulnerabilityProtectionSignaturesRsModelOrConditionObject
						if len(var38.OrCondition) != 0 {
							var40 = make([]vulnerabilityProtectionSignaturesRsModelOrConditionObject, 0, len(var38.OrCondition))
							for var41Index := range var38.OrCondition {
								var41 := var38.OrCondition[var41Index]
								var var42 vulnerabilityProtectionSignaturesRsModelOrConditionObject
								var42.Name = types.StringValue(var41.Name)
								var42.ThreatId = types.StringValue(var41.ThreatId)
								var40 = append(var40, var42)
							}
						}
						var39.Name = types.StringValue(var38.Name)
						var39.OrCondition = var40
						var37 = append(var37, var39)
					}
				}
				var36.AndCondition = var37
				var36.Comment = types.StringValue(var35.Comment)
				var36.Name = types.StringValue(var35.Name)
				var36.OrderFree = types.BoolValue(var35.OrderFree)
				var36.Scope = types.StringValue(var35.Scope)
				var34 = append(var34, var36)
			}
		}
		var25.Combination = var26
		var25.Standard = var34
	}
	state.AffectedHost = var22
	state.Bugtraq = EncodeStringSlice(ans.Bugtraq)
	state.Comment = types.StringValue(ans.Comment)
	state.Cve = EncodeStringSlice(ans.Cve)
	state.DefaultAction = var23
	state.Direction = types.StringValue(ans.Direction)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Reference = EncodeStringSlice(ans.Reference)
	state.Severity = types.StringValue(ans.Severity)
	state.Signature = var25
	state.ThreatId = types.Int64Value(ans.ThreatId)
	state.Threatname = types.StringValue(ans.Threatname)
	state.Vendor = EncodeStringSlice(ans.Vendor)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read resource.
func (r *vulnerabilityProtectionSignaturesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("id"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := idType.ValueString()
	tokens := strings.Split(id, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	var state vulnerabilityProtectionSignaturesRsModel

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "sase_vulnerability_protection_signatures",
		"locMap":        map[string]int{"Folder": 0, "ObjectId": 1},
		"tokens":        tokens,
	})

	// Prepare to read the config.
	svc := utDbvHr.NewClient(r.client)
	input := utDbvHr.ReadInput{
		ObjectId: tokens[1],
	}

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.
	state.Folder = types.StringValue(tokens[0])
	state.Id = idType
	var var0 *vulnerabilityProtectionSignaturesRsModelAffectedHostObject
	if ans.AffectedHost != nil {
		var0 = &vulnerabilityProtectionSignaturesRsModelAffectedHostObject{}
		var0.Client = types.BoolValue(ans.AffectedHost.Client)
		var0.Server = types.BoolValue(ans.AffectedHost.Server)
	}
	var var1 *vulnerabilityProtectionSignaturesRsModelDefaultActionObject
	if ans.DefaultAction != nil {
		var1 = &vulnerabilityProtectionSignaturesRsModelDefaultActionObject{}
		var var2 *vulnerabilityProtectionSignaturesRsModelBlockIpObject
		if ans.DefaultAction.BlockIp != nil {
			var2 = &vulnerabilityProtectionSignaturesRsModelBlockIpObject{}
			var2.Duration = types.Int64Value(ans.DefaultAction.BlockIp.Duration)
			var2.TrackBy = types.StringValue(ans.DefaultAction.BlockIp.TrackBy)
		}
		if ans.DefaultAction.Alert != nil {
			var1.Alert = types.BoolValue(true)
		}
		if ans.DefaultAction.Allow != nil {
			var1.Allow = types.BoolValue(true)
		}
		var1.BlockIp = var2
		if ans.DefaultAction.Drop != nil {
			var1.Drop = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetBoth != nil {
			var1.ResetBoth = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetClient != nil {
			var1.ResetClient = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetServer != nil {
			var1.ResetServer = types.BoolValue(true)
		}
	}
	var var3 *vulnerabilityProtectionSignaturesRsModelSignatureObject
	if ans.Signature != nil {
		var3 = &vulnerabilityProtectionSignaturesRsModelSignatureObject{}
		var var4 *vulnerabilityProtectionSignaturesRsModelCombinationObject
		if ans.Signature.Combination != nil {
			var4 = &vulnerabilityProtectionSignaturesRsModelCombinationObject{}
			var var5 []vulnerabilityProtectionSignaturesRsModelAndConditionObject
			if len(ans.Signature.Combination.AndCondition) != 0 {
				var5 = make([]vulnerabilityProtectionSignaturesRsModelAndConditionObject, 0, len(ans.Signature.Combination.AndCondition))
				for var6Index := range ans.Signature.Combination.AndCondition {
					var6 := ans.Signature.Combination.AndCondition[var6Index]
					var var7 vulnerabilityProtectionSignaturesRsModelAndConditionObject
					var var8 []vulnerabilityProtectionSignaturesRsModelOrConditionObject
					if len(var6.OrCondition) != 0 {
						var8 = make([]vulnerabilityProtectionSignaturesRsModelOrConditionObject, 0, len(var6.OrCondition))
						for var9Index := range var6.OrCondition {
							var9 := var6.OrCondition[var9Index]
							var var10 vulnerabilityProtectionSignaturesRsModelOrConditionObject
							var10.Name = types.StringValue(var9.Name)
							var10.ThreatId = types.StringValue(var9.ThreatId)
							var8 = append(var8, var10)
						}
					}
					var7.Name = types.StringValue(var6.Name)
					var7.OrCondition = var8
					var5 = append(var5, var7)
				}
			}
			var var11 *vulnerabilityProtectionSignaturesRsModelTimeAttributeObject
			if ans.Signature.Combination.TimeAttribute != nil {
				var11 = &vulnerabilityProtectionSignaturesRsModelTimeAttributeObject{}
				var11.Interval = types.Int64Value(ans.Signature.Combination.TimeAttribute.Interval)
				var11.Threshold = types.Int64Value(ans.Signature.Combination.TimeAttribute.Threshold)
				var11.TrackBy = types.StringValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
			var4.AndCondition = var5
			var4.OrderFree = types.BoolValue(ans.Signature.Combination.OrderFree)
			var4.TimeAttribute = var11
		}
		var var12 []vulnerabilityProtectionSignaturesRsModelStandardObject
		if len(ans.Signature.Standard) != 0 {
			var12 = make([]vulnerabilityProtectionSignaturesRsModelStandardObject, 0, len(ans.Signature.Standard))
			for var13Index := range ans.Signature.Standard {
				var13 := ans.Signature.Standard[var13Index]
				var var14 vulnerabilityProtectionSignaturesRsModelStandardObject
				var var15 []vulnerabilityProtectionSignaturesRsModelAndConditionObject
				if len(var13.AndCondition) != 0 {
					var15 = make([]vulnerabilityProtectionSignaturesRsModelAndConditionObject, 0, len(var13.AndCondition))
					for var16Index := range var13.AndCondition {
						var16 := var13.AndCondition[var16Index]
						var var17 vulnerabilityProtectionSignaturesRsModelAndConditionObject
						var var18 []vulnerabilityProtectionSignaturesRsModelOrConditionObject
						if len(var16.OrCondition) != 0 {
							var18 = make([]vulnerabilityProtectionSignaturesRsModelOrConditionObject, 0, len(var16.OrCondition))
							for var19Index := range var16.OrCondition {
								var19 := var16.OrCondition[var19Index]
								var var20 vulnerabilityProtectionSignaturesRsModelOrConditionObject
								var20.Name = types.StringValue(var19.Name)
								var20.ThreatId = types.StringValue(var19.ThreatId)
								var18 = append(var18, var20)
							}
						}
						var17.Name = types.StringValue(var16.Name)
						var17.OrCondition = var18
						var15 = append(var15, var17)
					}
				}
				var14.AndCondition = var15
				var14.Comment = types.StringValue(var13.Comment)
				var14.Name = types.StringValue(var13.Name)
				var14.OrderFree = types.BoolValue(var13.OrderFree)
				var14.Scope = types.StringValue(var13.Scope)
				var12 = append(var12, var14)
			}
		}
		var3.Combination = var4
		var3.Standard = var12
	}
	state.AffectedHost = var0
	state.Bugtraq = EncodeStringSlice(ans.Bugtraq)
	state.Comment = types.StringValue(ans.Comment)
	state.Cve = EncodeStringSlice(ans.Cve)
	state.DefaultAction = var1
	state.Direction = types.StringValue(ans.Direction)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Reference = EncodeStringSlice(ans.Reference)
	state.Severity = types.StringValue(ans.Severity)
	state.Signature = var3
	state.ThreatId = types.Int64Value(ans.ThreatId)
	state.Threatname = types.StringValue(ans.Threatname)
	state.Vendor = EncodeStringSlice(ans.Vendor)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update resource.
func (r *vulnerabilityProtectionSignaturesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state vulnerabilityProtectionSignaturesRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "sase_vulnerability_protection_signatures",
		"object_id":     state.ObjectId.ValueString(),
	})

	// Prepare to create the config.
	svc := utDbvHr.NewClient(r.client)
	input := utDbvHr.UpdateInput{
		ObjectId: state.ObjectId.ValueString(),
	}
	var var0 uPZBYbs.Config
	var var1 *uPZBYbs.AffectedHostObject
	if plan.AffectedHost != nil {
		var1 = &uPZBYbs.AffectedHostObject{}
		var1.Client = plan.AffectedHost.Client.ValueBool()
		var1.Server = plan.AffectedHost.Server.ValueBool()
	}
	var0.AffectedHost = var1
	var0.Bugtraq = DecodeStringSlice(plan.Bugtraq)
	var0.Comment = plan.Comment.ValueString()
	var0.Cve = DecodeStringSlice(plan.Cve)
	var var2 *uPZBYbs.DefaultActionObject
	if plan.DefaultAction != nil {
		var2 = &uPZBYbs.DefaultActionObject{}
		if plan.DefaultAction.Alert.ValueBool() {
			var2.Alert = struct{}{}
		}
		if plan.DefaultAction.Allow.ValueBool() {
			var2.Allow = struct{}{}
		}
		var var3 *uPZBYbs.BlockIpObject
		if plan.DefaultAction.BlockIp != nil {
			var3 = &uPZBYbs.BlockIpObject{}
			var3.Duration = plan.DefaultAction.BlockIp.Duration.ValueInt64()
			var3.TrackBy = plan.DefaultAction.BlockIp.TrackBy.ValueString()
		}
		var2.BlockIp = var3
		if plan.DefaultAction.Drop.ValueBool() {
			var2.Drop = struct{}{}
		}
		if plan.DefaultAction.ResetBoth.ValueBool() {
			var2.ResetBoth = struct{}{}
		}
		if plan.DefaultAction.ResetClient.ValueBool() {
			var2.ResetClient = struct{}{}
		}
		if plan.DefaultAction.ResetServer.ValueBool() {
			var2.ResetServer = struct{}{}
		}
	}
	var0.DefaultAction = var2
	var0.Direction = plan.Direction.ValueString()
	var0.Reference = DecodeStringSlice(plan.Reference)
	var0.Severity = plan.Severity.ValueString()
	var var4 *uPZBYbs.SignatureObject
	if plan.Signature != nil {
		var4 = &uPZBYbs.SignatureObject{}
		var var5 *uPZBYbs.CombinationObject
		if plan.Signature.Combination != nil {
			var5 = &uPZBYbs.CombinationObject{}
			var var6 []uPZBYbs.AndConditionObject
			if len(plan.Signature.Combination.AndCondition) != 0 {
				var6 = make([]uPZBYbs.AndConditionObject, 0, len(plan.Signature.Combination.AndCondition))
				for var7Index := range plan.Signature.Combination.AndCondition {
					var7 := plan.Signature.Combination.AndCondition[var7Index]
					var var8 uPZBYbs.AndConditionObject
					var8.Name = var7.Name.ValueString()
					var var9 []uPZBYbs.OrConditionObject
					if len(var7.OrCondition) != 0 {
						var9 = make([]uPZBYbs.OrConditionObject, 0, len(var7.OrCondition))
						for var10Index := range var7.OrCondition {
							var10 := var7.OrCondition[var10Index]
							var var11 uPZBYbs.OrConditionObject
							var11.Name = var10.Name.ValueString()
							var11.ThreatId = var10.ThreatId.ValueString()
							var9 = append(var9, var11)
						}
					}
					var8.OrCondition = var9
					var6 = append(var6, var8)
				}
			}
			var5.AndCondition = var6
			var5.OrderFree = plan.Signature.Combination.OrderFree.ValueBool()
			var var12 *uPZBYbs.TimeAttributeObject
			if plan.Signature.Combination.TimeAttribute != nil {
				var12 = &uPZBYbs.TimeAttributeObject{}
				var12.Interval = plan.Signature.Combination.TimeAttribute.Interval.ValueInt64()
				var12.Threshold = plan.Signature.Combination.TimeAttribute.Threshold.ValueInt64()
				var12.TrackBy = plan.Signature.Combination.TimeAttribute.TrackBy.ValueString()
			}
			var5.TimeAttribute = var12
		}
		var4.Combination = var5
		var var13 []uPZBYbs.StandardObject
		if len(plan.Signature.Standard) != 0 {
			var13 = make([]uPZBYbs.StandardObject, 0, len(plan.Signature.Standard))
			for var14Index := range plan.Signature.Standard {
				var14 := plan.Signature.Standard[var14Index]
				var var15 uPZBYbs.StandardObject
				var var16 []uPZBYbs.AndConditionObject
				if len(var14.AndCondition) != 0 {
					var16 = make([]uPZBYbs.AndConditionObject, 0, len(var14.AndCondition))
					for var17Index := range var14.AndCondition {
						var17 := var14.AndCondition[var17Index]
						var var18 uPZBYbs.AndConditionObject
						var18.Name = var17.Name.ValueString()
						var var19 []uPZBYbs.OrConditionObject
						if len(var17.OrCondition) != 0 {
							var19 = make([]uPZBYbs.OrConditionObject, 0, len(var17.OrCondition))
							for var20Index := range var17.OrCondition {
								var20 := var17.OrCondition[var20Index]
								var var21 uPZBYbs.OrConditionObject
								var21.Name = var20.Name.ValueString()
								var21.ThreatId = var20.ThreatId.ValueString()
								var19 = append(var19, var21)
							}
						}
						var18.OrCondition = var19
						var16 = append(var16, var18)
					}
				}
				var15.AndCondition = var16
				var15.Comment = var14.Comment.ValueString()
				var15.Name = var14.Name.ValueString()
				var15.OrderFree = var14.OrderFree.ValueBool()
				var15.Scope = var14.Scope.ValueString()
				var13 = append(var13, var15)
			}
		}
		var4.Standard = var13
	}
	var0.Signature = var4
	var0.ThreatId = plan.ThreatId.ValueInt64()
	var0.Threatname = plan.Threatname.ValueString()
	var0.Vendor = DecodeStringSlice(plan.Vendor)
	input.Config = var0

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Store the answer to state.
	var var22 *vulnerabilityProtectionSignaturesRsModelAffectedHostObject
	if ans.AffectedHost != nil {
		var22 = &vulnerabilityProtectionSignaturesRsModelAffectedHostObject{}
		var22.Client = types.BoolValue(ans.AffectedHost.Client)
		var22.Server = types.BoolValue(ans.AffectedHost.Server)
	}
	var var23 *vulnerabilityProtectionSignaturesRsModelDefaultActionObject
	if ans.DefaultAction != nil {
		var23 = &vulnerabilityProtectionSignaturesRsModelDefaultActionObject{}
		var var24 *vulnerabilityProtectionSignaturesRsModelBlockIpObject
		if ans.DefaultAction.BlockIp != nil {
			var24 = &vulnerabilityProtectionSignaturesRsModelBlockIpObject{}
			var24.Duration = types.Int64Value(ans.DefaultAction.BlockIp.Duration)
			var24.TrackBy = types.StringValue(ans.DefaultAction.BlockIp.TrackBy)
		}
		if ans.DefaultAction.Alert != nil {
			var23.Alert = types.BoolValue(true)
		}
		if ans.DefaultAction.Allow != nil {
			var23.Allow = types.BoolValue(true)
		}
		var23.BlockIp = var24
		if ans.DefaultAction.Drop != nil {
			var23.Drop = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetBoth != nil {
			var23.ResetBoth = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetClient != nil {
			var23.ResetClient = types.BoolValue(true)
		}
		if ans.DefaultAction.ResetServer != nil {
			var23.ResetServer = types.BoolValue(true)
		}
	}
	var var25 *vulnerabilityProtectionSignaturesRsModelSignatureObject
	if ans.Signature != nil {
		var25 = &vulnerabilityProtectionSignaturesRsModelSignatureObject{}
		var var26 *vulnerabilityProtectionSignaturesRsModelCombinationObject
		if ans.Signature.Combination != nil {
			var26 = &vulnerabilityProtectionSignaturesRsModelCombinationObject{}
			var var27 []vulnerabilityProtectionSignaturesRsModelAndConditionObject
			if len(ans.Signature.Combination.AndCondition) != 0 {
				var27 = make([]vulnerabilityProtectionSignaturesRsModelAndConditionObject, 0, len(ans.Signature.Combination.AndCondition))
				for var28Index := range ans.Signature.Combination.AndCondition {
					var28 := ans.Signature.Combination.AndCondition[var28Index]
					var var29 vulnerabilityProtectionSignaturesRsModelAndConditionObject
					var var30 []vulnerabilityProtectionSignaturesRsModelOrConditionObject
					if len(var28.OrCondition) != 0 {
						var30 = make([]vulnerabilityProtectionSignaturesRsModelOrConditionObject, 0, len(var28.OrCondition))
						for var31Index := range var28.OrCondition {
							var31 := var28.OrCondition[var31Index]
							var var32 vulnerabilityProtectionSignaturesRsModelOrConditionObject
							var32.Name = types.StringValue(var31.Name)
							var32.ThreatId = types.StringValue(var31.ThreatId)
							var30 = append(var30, var32)
						}
					}
					var29.Name = types.StringValue(var28.Name)
					var29.OrCondition = var30
					var27 = append(var27, var29)
				}
			}
			var var33 *vulnerabilityProtectionSignaturesRsModelTimeAttributeObject
			if ans.Signature.Combination.TimeAttribute != nil {
				var33 = &vulnerabilityProtectionSignaturesRsModelTimeAttributeObject{}
				var33.Interval = types.Int64Value(ans.Signature.Combination.TimeAttribute.Interval)
				var33.Threshold = types.Int64Value(ans.Signature.Combination.TimeAttribute.Threshold)
				var33.TrackBy = types.StringValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
			var26.AndCondition = var27
			var26.OrderFree = types.BoolValue(ans.Signature.Combination.OrderFree)
			var26.TimeAttribute = var33
		}
		var var34 []vulnerabilityProtectionSignaturesRsModelStandardObject
		if len(ans.Signature.Standard) != 0 {
			var34 = make([]vulnerabilityProtectionSignaturesRsModelStandardObject, 0, len(ans.Signature.Standard))
			for var35Index := range ans.Signature.Standard {
				var35 := ans.Signature.Standard[var35Index]
				var var36 vulnerabilityProtectionSignaturesRsModelStandardObject
				var var37 []vulnerabilityProtectionSignaturesRsModelAndConditionObject
				if len(var35.AndCondition) != 0 {
					var37 = make([]vulnerabilityProtectionSignaturesRsModelAndConditionObject, 0, len(var35.AndCondition))
					for var38Index := range var35.AndCondition {
						var38 := var35.AndCondition[var38Index]
						var var39 vulnerabilityProtectionSignaturesRsModelAndConditionObject
						var var40 []vulnerabilityProtectionSignaturesRsModelOrConditionObject
						if len(var38.OrCondition) != 0 {
							var40 = make([]vulnerabilityProtectionSignaturesRsModelOrConditionObject, 0, len(var38.OrCondition))
							for var41Index := range var38.OrCondition {
								var41 := var38.OrCondition[var41Index]
								var var42 vulnerabilityProtectionSignaturesRsModelOrConditionObject
								var42.Name = types.StringValue(var41.Name)
								var42.ThreatId = types.StringValue(var41.ThreatId)
								var40 = append(var40, var42)
							}
						}
						var39.Name = types.StringValue(var38.Name)
						var39.OrCondition = var40
						var37 = append(var37, var39)
					}
				}
				var36.AndCondition = var37
				var36.Comment = types.StringValue(var35.Comment)
				var36.Name = types.StringValue(var35.Name)
				var36.OrderFree = types.BoolValue(var35.OrderFree)
				var36.Scope = types.StringValue(var35.Scope)
				var34 = append(var34, var36)
			}
		}
		var25.Combination = var26
		var25.Standard = var34
	}
	state.AffectedHost = var22
	state.Bugtraq = EncodeStringSlice(ans.Bugtraq)
	state.Comment = types.StringValue(ans.Comment)
	state.Cve = EncodeStringSlice(ans.Cve)
	state.DefaultAction = var23
	state.Direction = types.StringValue(ans.Direction)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Reference = EncodeStringSlice(ans.Reference)
	state.Severity = types.StringValue(ans.Severity)
	state.Signature = var25
	state.ThreatId = types.Int64Value(ans.ThreatId)
	state.Threatname = types.StringValue(ans.Threatname)
	state.Vendor = EncodeStringSlice(ans.Vendor)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete resource.
func (r *vulnerabilityProtectionSignaturesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("id"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := idType.ValueString()
	tokens := strings.Split(id, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "sase_vulnerability_protection_signatures",
		"locMap":        map[string]int{"Folder": 0, "ObjectId": 1},
		"tokens":        tokens,
	})

	svc := utDbvHr.NewClient(r.client)
	input := utDbvHr.DeleteInput{
		ObjectId: tokens[1],
	}

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *vulnerabilityProtectionSignaturesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
