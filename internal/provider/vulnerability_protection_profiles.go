package provider

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/sase-go"
	"github.com/paloaltonetworks/sase-go/api"
	mGmzwhO "github.com/paloaltonetworks/sase-go/netsec/schema/vulnerability/protection/profiles"
	sImSpCX "github.com/paloaltonetworks/sase-go/netsec/service/v1/vulnerabilityprotectionprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &vulnerabilityProtectionProfilesListDataSource{}
	_ datasource.DataSourceWithConfigure = &vulnerabilityProtectionProfilesListDataSource{}
)

func NewVulnerabilityProtectionProfilesListDataSource() datasource.DataSource {
	return &vulnerabilityProtectionProfilesListDataSource{}
}

type vulnerabilityProtectionProfilesListDataSource struct {
	client *sase.Client
}

type vulnerabilityProtectionProfilesListDsModel struct {
	Id types.String `tfsdk:"id"`

	// Input.
	Limit  types.Int64  `tfsdk:"limit"`
	Offset types.Int64  `tfsdk:"offset"`
	Name   types.String `tfsdk:"name"`
	Folder types.String `tfsdk:"folder"`

	// Output.
	Data []vulnerabilityProtectionProfilesListDsModelConfig `tfsdk:"data"`
	// input omit: Limit
	// input omit: Offset
	Total types.Int64 `tfsdk:"total"`
}

type vulnerabilityProtectionProfilesListDsModelConfig struct {
	Description     types.String                                                      `tfsdk:"description"`
	ObjectId        types.String                                                      `tfsdk:"object_id"`
	Name            types.String                                                      `tfsdk:"name"`
	Rules           []vulnerabilityProtectionProfilesListDsModelRulesObject           `tfsdk:"rules"`
	ThreatException []vulnerabilityProtectionProfilesListDsModelThreatExceptionObject `tfsdk:"threat_exception"`
}

type vulnerabilityProtectionProfilesListDsModelRulesObject struct {
	Action        *vulnerabilityProtectionProfilesListDsModelActionObject `tfsdk:"action"`
	Category      types.String                                            `tfsdk:"category"`
	Cve           []types.String                                          `tfsdk:"cve"`
	Host          types.String                                            `tfsdk:"host"`
	Name          types.String                                            `tfsdk:"name"`
	PacketCapture types.String                                            `tfsdk:"packet_capture"`
	Severity      []types.String                                          `tfsdk:"severity"`
	ThreatName    types.String                                            `tfsdk:"threat_name"`
	VendorId      []types.String                                          `tfsdk:"vendor_id"`
}

type vulnerabilityProtectionProfilesListDsModelActionObject struct {
	Alert       types.Bool                                               `tfsdk:"alert"`
	Allow       types.Bool                                               `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfilesListDsModelBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                               `tfsdk:"default"`
	Drop        types.Bool                                               `tfsdk:"drop"`
	ResetBoth   types.Bool                                               `tfsdk:"reset_both"`
	ResetClient types.Bool                                               `tfsdk:"reset_client"`
	ResetServer types.Bool                                               `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfilesListDsModelBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfilesListDsModelThreatExceptionObject struct {
	Action        *vulnerabilityProtectionProfilesListDsModelActionObject        `tfsdk:"action"`
	ExemptIp      []vulnerabilityProtectionProfilesListDsModelExemptIpObject     `tfsdk:"exempt_ip"`
	Name          types.String                                                   `tfsdk:"name"`
	Notes         types.String                                                   `tfsdk:"notes"`
	PacketCapture types.String                                                   `tfsdk:"packet_capture"`
	TimeAttribute *vulnerabilityProtectionProfilesListDsModelTimeAttributeObject `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionProfilesListDsModelExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

type vulnerabilityProtectionProfilesListDsModelTimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

// Metadata returns the data source type name.
func (d *vulnerabilityProtectionProfilesListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_profiles_list"
}

// Schema defines the schema for this listing data source.
func (d *vulnerabilityProtectionProfilesListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			"id": dsschema.StringAttribute{
				Description:         "The object ID.",
				MarkdownDescription: "The object ID.",
				Computed:            true,
			},

			// Input.
			"limit": dsschema.Int64Attribute{
				Description:         "The max count in result entry (count per page).",
				MarkdownDescription: "The max count in result entry (count per page).",
				Optional:            true,
				Computed:            true,
			},
			"offset": dsschema.Int64Attribute{
				Description:         "The offset of the result entry.",
				MarkdownDescription: "The offset of the result entry.",
				Optional:            true,
				Computed:            true,
			},
			"name": dsschema.StringAttribute{
				Description:         "The name of the entry.",
				MarkdownDescription: "The name of the entry.",
				Optional:            true,
			},
			"folder": dsschema.StringAttribute{
				Description:         "The folder of the entry. Value must be one of: `\"Shared\"`, `\"Mobile Users\"`, `\"Remote Networks\"`, `\"Service Connections\"`, `\"Mobile Users Container\"`, `\"Mobile Users Explicit Proxy\"`.",
				MarkdownDescription: "The folder of the entry. Value must be one of: `\"Shared\"`, `\"Mobile Users\"`, `\"Remote Networks\"`, `\"Service Connections\"`, `\"Mobile Users Container\"`, `\"Mobile Users Explicit Proxy\"`.",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("Shared", "Mobile Users", "Remote Networks", "Service Connections", "Mobile Users Container", "Mobile Users Explicit Proxy"),
				},
			},

			// Output.
			"data": dsschema.ListNestedAttribute{
				Description:         "The `data` parameter.",
				MarkdownDescription: "The `data` parameter.",
				Computed:            true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						"description": dsschema.StringAttribute{
							Description:         "The `description` parameter.",
							MarkdownDescription: "The `description` parameter.",
							Computed:            true,
						},
						"object_id": dsschema.StringAttribute{
							Description:         "The `object_id` parameter.",
							MarkdownDescription: "The `object_id` parameter.",
							Computed:            true,
						},
						"name": dsschema.StringAttribute{
							Description:         "The `name` parameter.",
							MarkdownDescription: "The `name` parameter.",
							Computed:            true,
						},
						"rules": dsschema.ListNestedAttribute{
							Description:         "The `rules` parameter.",
							MarkdownDescription: "The `rules` parameter.",
							Computed:            true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									"action": dsschema.SingleNestedAttribute{
										Description:         "The `action` parameter.",
										MarkdownDescription: "The `action` parameter.",
										Computed:            true,
										Attributes: map[string]dsschema.Attribute{
											"alert": dsschema.BoolAttribute{
												Description:         "The `alert` parameter.",
												MarkdownDescription: "The `alert` parameter.",
												Computed:            true,
											},
											"allow": dsschema.BoolAttribute{
												Description:         "The `allow` parameter.",
												MarkdownDescription: "The `allow` parameter.",
												Computed:            true,
											},
											"block_ip": dsschema.SingleNestedAttribute{
												Description:         "The `block_ip` parameter.",
												MarkdownDescription: "The `block_ip` parameter.",
												Computed:            true,
												Attributes: map[string]dsschema.Attribute{
													"duration": dsschema.Int64Attribute{
														Description:         "The `duration` parameter.",
														MarkdownDescription: "The `duration` parameter.",
														Computed:            true,
													},
													"track_by": dsschema.StringAttribute{
														Description:         "The `track_by` parameter.",
														MarkdownDescription: "The `track_by` parameter.",
														Computed:            true,
													},
												},
											},
											"default": dsschema.BoolAttribute{
												Description:         "The `default` parameter.",
												MarkdownDescription: "The `default` parameter.",
												Computed:            true,
											},
											"drop": dsschema.BoolAttribute{
												Description:         "The `drop` parameter.",
												MarkdownDescription: "The `drop` parameter.",
												Computed:            true,
											},
											"reset_both": dsschema.BoolAttribute{
												Description:         "The `reset_both` parameter.",
												MarkdownDescription: "The `reset_both` parameter.",
												Computed:            true,
											},
											"reset_client": dsschema.BoolAttribute{
												Description:         "The `reset_client` parameter.",
												MarkdownDescription: "The `reset_client` parameter.",
												Computed:            true,
											},
											"reset_server": dsschema.BoolAttribute{
												Description:         "The `reset_server` parameter.",
												MarkdownDescription: "The `reset_server` parameter.",
												Computed:            true,
											},
										},
									},
									"category": dsschema.StringAttribute{
										Description:         "The `category` parameter.",
										MarkdownDescription: "The `category` parameter.",
										Computed:            true,
									},
									"cve": dsschema.ListAttribute{
										Description:         "The `cve` parameter.",
										MarkdownDescription: "The `cve` parameter.",
										Computed:            true,
										ElementType:         types.StringType,
									},
									"host": dsschema.StringAttribute{
										Description:         "The `host` parameter.",
										MarkdownDescription: "The `host` parameter.",
										Computed:            true,
									},
									"name": dsschema.StringAttribute{
										Description:         "The `name` parameter.",
										MarkdownDescription: "The `name` parameter.",
										Computed:            true,
									},
									"packet_capture": dsschema.StringAttribute{
										Description:         "The `packet_capture` parameter.",
										MarkdownDescription: "The `packet_capture` parameter.",
										Computed:            true,
									},
									"severity": dsschema.ListAttribute{
										Description:         "The `severity` parameter.",
										MarkdownDescription: "The `severity` parameter.",
										Computed:            true,
										ElementType:         types.StringType,
									},
									"threat_name": dsschema.StringAttribute{
										Description:         "The `threat_name` parameter.",
										MarkdownDescription: "The `threat_name` parameter.",
										Computed:            true,
									},
									"vendor_id": dsschema.ListAttribute{
										Description:         "The `vendor_id` parameter.",
										MarkdownDescription: "The `vendor_id` parameter.",
										Computed:            true,
										ElementType:         types.StringType,
									},
								},
							},
						},
						"threat_exception": dsschema.ListNestedAttribute{
							Description:         "The `threat_exception` parameter.",
							MarkdownDescription: "The `threat_exception` parameter.",
							Computed:            true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									"action": dsschema.SingleNestedAttribute{
										Description:         "The `action` parameter.",
										MarkdownDescription: "The `action` parameter.",
										Computed:            true,
										Attributes: map[string]dsschema.Attribute{
											"alert": dsschema.BoolAttribute{
												Description:         "The `alert` parameter.",
												MarkdownDescription: "The `alert` parameter.",
												Computed:            true,
											},
											"allow": dsschema.BoolAttribute{
												Description:         "The `allow` parameter.",
												MarkdownDescription: "The `allow` parameter.",
												Computed:            true,
											},
											"block_ip": dsschema.SingleNestedAttribute{
												Description:         "The `block_ip` parameter.",
												MarkdownDescription: "The `block_ip` parameter.",
												Computed:            true,
												Attributes: map[string]dsschema.Attribute{
													"duration": dsschema.Int64Attribute{
														Description:         "The `duration` parameter.",
														MarkdownDescription: "The `duration` parameter.",
														Computed:            true,
													},
													"track_by": dsschema.StringAttribute{
														Description:         "The `track_by` parameter.",
														MarkdownDescription: "The `track_by` parameter.",
														Computed:            true,
													},
												},
											},
											"default": dsschema.BoolAttribute{
												Description:         "The `default` parameter.",
												MarkdownDescription: "The `default` parameter.",
												Computed:            true,
											},
											"drop": dsschema.BoolAttribute{
												Description:         "The `drop` parameter.",
												MarkdownDescription: "The `drop` parameter.",
												Computed:            true,
											},
											"reset_both": dsschema.BoolAttribute{
												Description:         "The `reset_both` parameter.",
												MarkdownDescription: "The `reset_both` parameter.",
												Computed:            true,
											},
											"reset_client": dsschema.BoolAttribute{
												Description:         "The `reset_client` parameter.",
												MarkdownDescription: "The `reset_client` parameter.",
												Computed:            true,
											},
											"reset_server": dsschema.BoolAttribute{
												Description:         "The `reset_server` parameter.",
												MarkdownDescription: "The `reset_server` parameter.",
												Computed:            true,
											},
										},
									},
									"exempt_ip": dsschema.ListNestedAttribute{
										Description:         "The `exempt_ip` parameter.",
										MarkdownDescription: "The `exempt_ip` parameter.",
										Computed:            true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												"name": dsschema.StringAttribute{
													Description:         "The `name` parameter.",
													MarkdownDescription: "The `name` parameter.",
													Computed:            true,
												},
											},
										},
									},
									"name": dsschema.StringAttribute{
										Description:         "The `name` parameter.",
										MarkdownDescription: "The `name` parameter.",
										Computed:            true,
									},
									"notes": dsschema.StringAttribute{
										Description:         "The `notes` parameter.",
										MarkdownDescription: "The `notes` parameter.",
										Computed:            true,
									},
									"packet_capture": dsschema.StringAttribute{
										Description:         "The `packet_capture` parameter.",
										MarkdownDescription: "The `packet_capture` parameter.",
										Computed:            true,
									},
									"time_attribute": dsschema.SingleNestedAttribute{
										Description:         "The `time_attribute` parameter.",
										MarkdownDescription: "The `time_attribute` parameter.",
										Computed:            true,
										Attributes: map[string]dsschema.Attribute{
											"interval": dsschema.Int64Attribute{
												Description:         "The `interval` parameter.",
												MarkdownDescription: "The `interval` parameter.",
												Computed:            true,
											},
											"threshold": dsschema.Int64Attribute{
												Description:         "The `threshold` parameter.",
												MarkdownDescription: "The `threshold` parameter.",
												Computed:            true,
											},
											"track_by": dsschema.StringAttribute{
												Description:         "The `track_by` parameter.",
												MarkdownDescription: "The `track_by` parameter.",
												Computed:            true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"total": dsschema.Int64Attribute{
				Description:         "The `total` parameter.",
				MarkdownDescription: "The `total` parameter.",
				Computed:            true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *vulnerabilityProtectionProfilesListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sase.Client)
}

func (d *vulnerabilityProtectionProfilesListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state vulnerabilityProtectionProfilesListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "sase_vulnerability_protection_profiles_list",
		"terraform_provider_function": "Read",
		"limit":                       state.Limit.ValueInt64(),
		"has_limit":                   !state.Limit.IsNull(),
		"offset":                      state.Offset.ValueInt64(),
		"has_offset":                  !state.Offset.IsNull(),
		"name":                        state.Name.ValueString(),
		"has_name":                    !state.Name.IsNull(),
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := sImSpCX.NewClient(d.client)
	input := sImSpCX.ListInput{
		Folder: state.Folder.ValueString(),
	}
	if !state.Limit.IsNull() {
		input.Limit = api.Int(state.Limit.ValueInt64())
	}
	if !state.Offset.IsNull() {
		input.Offset = api.Int(state.Offset.ValueInt64())
	}
	if !state.Name.IsNull() {
		input.Name = api.String(state.Name.ValueString())
	}

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Store the answer to state.
	var idBuilder strings.Builder
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	} else {
		idBuilder.WriteString("0")
	}
	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	} else {
		idBuilder.WriteString("0")
	}
	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}
	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)
	state.Id = types.StringValue(idBuilder.String())
	var var0 []vulnerabilityProtectionProfilesListDsModelConfig
	if len(ans.Data) != 0 {
		var0 = make([]vulnerabilityProtectionProfilesListDsModelConfig, 0, len(ans.Data))
		for var1Index := range ans.Data {
			var1 := ans.Data[var1Index]
			var var2 vulnerabilityProtectionProfilesListDsModelConfig
			var var3 []vulnerabilityProtectionProfilesListDsModelRulesObject
			if len(var1.Rules) != 0 {
				var3 = make([]vulnerabilityProtectionProfilesListDsModelRulesObject, 0, len(var1.Rules))
				for var4Index := range var1.Rules {
					var4 := var1.Rules[var4Index]
					var var5 vulnerabilityProtectionProfilesListDsModelRulesObject
					var var6 *vulnerabilityProtectionProfilesListDsModelActionObject
					if var4.Action != nil {
						var6 = &vulnerabilityProtectionProfilesListDsModelActionObject{}
						var var7 *vulnerabilityProtectionProfilesListDsModelBlockIpObject
						if var4.Action.BlockIp != nil {
							var7 = &vulnerabilityProtectionProfilesListDsModelBlockIpObject{}
							var7.Duration = types.Int64Value(var4.Action.BlockIp.Duration)
							var7.TrackBy = types.StringValue(var4.Action.BlockIp.TrackBy)
						}
						if var4.Action.Alert != nil {
							var6.Alert = types.BoolValue(true)
						}
						if var4.Action.Allow != nil {
							var6.Allow = types.BoolValue(true)
						}
						var6.BlockIp = var7
						if var4.Action.Default != nil {
							var6.Default = types.BoolValue(true)
						}
						if var4.Action.Drop != nil {
							var6.Drop = types.BoolValue(true)
						}
						if var4.Action.ResetBoth != nil {
							var6.ResetBoth = types.BoolValue(true)
						}
						if var4.Action.ResetClient != nil {
							var6.ResetClient = types.BoolValue(true)
						}
						if var4.Action.ResetServer != nil {
							var6.ResetServer = types.BoolValue(true)
						}
					}
					var5.Action = var6
					var5.Category = types.StringValue(var4.Category)
					var5.Cve = EncodeStringSlice(var4.Cve)
					var5.Host = types.StringValue(var4.Host)
					var5.Name = types.StringValue(var4.Name)
					var5.PacketCapture = types.StringValue(var4.PacketCapture)
					var5.Severity = EncodeStringSlice(var4.Severity)
					var5.ThreatName = types.StringValue(var4.ThreatName)
					var5.VendorId = EncodeStringSlice(var4.VendorId)
					var3 = append(var3, var5)
				}
			}
			var var8 []vulnerabilityProtectionProfilesListDsModelThreatExceptionObject
			if len(var1.ThreatException) != 0 {
				var8 = make([]vulnerabilityProtectionProfilesListDsModelThreatExceptionObject, 0, len(var1.ThreatException))
				for var9Index := range var1.ThreatException {
					var9 := var1.ThreatException[var9Index]
					var var10 vulnerabilityProtectionProfilesListDsModelThreatExceptionObject
					var var11 *vulnerabilityProtectionProfilesListDsModelActionObject
					if var9.Action != nil {
						var11 = &vulnerabilityProtectionProfilesListDsModelActionObject{}
						var var12 *vulnerabilityProtectionProfilesListDsModelBlockIpObject
						if var9.Action.BlockIp != nil {
							var12 = &vulnerabilityProtectionProfilesListDsModelBlockIpObject{}
							var12.Duration = types.Int64Value(var9.Action.BlockIp.Duration)
							var12.TrackBy = types.StringValue(var9.Action.BlockIp.TrackBy)
						}
						if var9.Action.Alert != nil {
							var11.Alert = types.BoolValue(true)
						}
						if var9.Action.Allow != nil {
							var11.Allow = types.BoolValue(true)
						}
						var11.BlockIp = var12
						if var9.Action.Default != nil {
							var11.Default = types.BoolValue(true)
						}
						if var9.Action.Drop != nil {
							var11.Drop = types.BoolValue(true)
						}
						if var9.Action.ResetBoth != nil {
							var11.ResetBoth = types.BoolValue(true)
						}
						if var9.Action.ResetClient != nil {
							var11.ResetClient = types.BoolValue(true)
						}
						if var9.Action.ResetServer != nil {
							var11.ResetServer = types.BoolValue(true)
						}
					}
					var var13 []vulnerabilityProtectionProfilesListDsModelExemptIpObject
					if len(var9.ExemptIp) != 0 {
						var13 = make([]vulnerabilityProtectionProfilesListDsModelExemptIpObject, 0, len(var9.ExemptIp))
						for var14Index := range var9.ExemptIp {
							var14 := var9.ExemptIp[var14Index]
							var var15 vulnerabilityProtectionProfilesListDsModelExemptIpObject
							var15.Name = types.StringValue(var14.Name)
							var13 = append(var13, var15)
						}
					}
					var var16 *vulnerabilityProtectionProfilesListDsModelTimeAttributeObject
					if var9.TimeAttribute != nil {
						var16 = &vulnerabilityProtectionProfilesListDsModelTimeAttributeObject{}
						var16.Interval = types.Int64Value(var9.TimeAttribute.Interval)
						var16.Threshold = types.Int64Value(var9.TimeAttribute.Threshold)
						var16.TrackBy = types.StringValue(var9.TimeAttribute.TrackBy)
					}
					var10.Action = var11
					var10.ExemptIp = var13
					var10.Name = types.StringValue(var9.Name)
					var10.Notes = types.StringValue(var9.Notes)
					var10.PacketCapture = types.StringValue(var9.PacketCapture)
					var10.TimeAttribute = var16
					var8 = append(var8, var10)
				}
			}
			var2.Description = types.StringValue(var1.Description)
			var2.ObjectId = types.StringValue(var1.ObjectId)
			var2.Name = types.StringValue(var1.Name)
			var2.Rules = var3
			var2.ThreatException = var8
			var0 = append(var0, var2)
		}
	}
	state.Data = var0
	if !state.Limit.IsNull() {
		state.Limit = types.Int64Value(ans.Limit)
	}
	if !state.Offset.IsNull() {
		state.Offset = types.Int64Value(ans.Offset)
	}
	state.Total = types.Int64Value(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &vulnerabilityProtectionProfilesDataSource{}
	_ datasource.DataSourceWithConfigure = &vulnerabilityProtectionProfilesDataSource{}
)

func NewVulnerabilityProtectionProfilesDataSource() datasource.DataSource {
	return &vulnerabilityProtectionProfilesDataSource{}
}

type vulnerabilityProtectionProfilesDataSource struct {
	client *sase.Client
}

type vulnerabilityProtectionProfilesDsModel struct {
	Id types.String `tfsdk:"id"`

	// Input.
	ObjectId types.String `tfsdk:"object_id"`
	Folder   types.String `tfsdk:"folder"`

	// Output.
	// Ref: #/components/schemas/vulnerability-protection-profiles
	Description types.String `tfsdk:"description"`
	// input omit: ObjectId
	Name            types.String                                                  `tfsdk:"name"`
	Rules           []vulnerabilityProtectionProfilesDsModelRulesObject           `tfsdk:"rules"`
	ThreatException []vulnerabilityProtectionProfilesDsModelThreatExceptionObject `tfsdk:"threat_exception"`
}

type vulnerabilityProtectionProfilesDsModelRulesObject struct {
	Action        *vulnerabilityProtectionProfilesDsModelActionObject `tfsdk:"action"`
	Category      types.String                                        `tfsdk:"category"`
	Cve           []types.String                                      `tfsdk:"cve"`
	Host          types.String                                        `tfsdk:"host"`
	Name          types.String                                        `tfsdk:"name"`
	PacketCapture types.String                                        `tfsdk:"packet_capture"`
	Severity      []types.String                                      `tfsdk:"severity"`
	ThreatName    types.String                                        `tfsdk:"threat_name"`
	VendorId      []types.String                                      `tfsdk:"vendor_id"`
}

type vulnerabilityProtectionProfilesDsModelActionObject struct {
	Alert       types.Bool                                           `tfsdk:"alert"`
	Allow       types.Bool                                           `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfilesDsModelBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                           `tfsdk:"default"`
	Drop        types.Bool                                           `tfsdk:"drop"`
	ResetBoth   types.Bool                                           `tfsdk:"reset_both"`
	ResetClient types.Bool                                           `tfsdk:"reset_client"`
	ResetServer types.Bool                                           `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfilesDsModelBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfilesDsModelThreatExceptionObject struct {
	Action        *vulnerabilityProtectionProfilesDsModelActionObject        `tfsdk:"action"`
	ExemptIp      []vulnerabilityProtectionProfilesDsModelExemptIpObject     `tfsdk:"exempt_ip"`
	Name          types.String                                               `tfsdk:"name"`
	Notes         types.String                                               `tfsdk:"notes"`
	PacketCapture types.String                                               `tfsdk:"packet_capture"`
	TimeAttribute *vulnerabilityProtectionProfilesDsModelTimeAttributeObject `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionProfilesDsModelExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

type vulnerabilityProtectionProfilesDsModelTimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

// Metadata returns the data source type name.
func (d *vulnerabilityProtectionProfilesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_profiles"
}

// Schema defines the schema for this listing data source.
func (d *vulnerabilityProtectionProfilesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves config for a specific item.",

		Attributes: map[string]dsschema.Attribute{
			"id": dsschema.StringAttribute{
				Description:         "The object ID.",
				MarkdownDescription: "The object ID.",
				Computed:            true,
			},

			// Input.
			"object_id": dsschema.StringAttribute{
				Description:         "The uuid of the resource.",
				MarkdownDescription: "The uuid of the resource.",
				Required:            true,
			},
			"folder": dsschema.StringAttribute{
				Description:         "The folder of the entry. Value must be one of: `\"Shared\"`, `\"Mobile Users\"`, `\"Remote Networks\"`, `\"Service Connections\"`, `\"Mobile Users Container\"`, `\"Mobile Users Explicit Proxy\"`.",
				MarkdownDescription: "The folder of the entry. Value must be one of: `\"Shared\"`, `\"Mobile Users\"`, `\"Remote Networks\"`, `\"Service Connections\"`, `\"Mobile Users Container\"`, `\"Mobile Users Explicit Proxy\"`.",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("Shared", "Mobile Users", "Remote Networks", "Service Connections", "Mobile Users Container", "Mobile Users Explicit Proxy"),
				},
			},

			// Output.
			"description": dsschema.StringAttribute{
				Description:         "The `description` parameter.",
				MarkdownDescription: "The `description` parameter.",
				Computed:            true,
			},
			"name": dsschema.StringAttribute{
				Description:         "The `name` parameter.",
				MarkdownDescription: "The `name` parameter.",
				Computed:            true,
			},
			"rules": dsschema.ListNestedAttribute{
				Description:         "The `rules` parameter.",
				MarkdownDescription: "The `rules` parameter.",
				Computed:            true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						"action": dsschema.SingleNestedAttribute{
							Description:         "The `action` parameter.",
							MarkdownDescription: "The `action` parameter.",
							Computed:            true,
							Attributes: map[string]dsschema.Attribute{
								"alert": dsschema.BoolAttribute{
									Description:         "The `alert` parameter.",
									MarkdownDescription: "The `alert` parameter.",
									Computed:            true,
								},
								"allow": dsschema.BoolAttribute{
									Description:         "The `allow` parameter.",
									MarkdownDescription: "The `allow` parameter.",
									Computed:            true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description:         "The `block_ip` parameter.",
									MarkdownDescription: "The `block_ip` parameter.",
									Computed:            true,
									Attributes: map[string]dsschema.Attribute{
										"duration": dsschema.Int64Attribute{
											Description:         "The `duration` parameter.",
											MarkdownDescription: "The `duration` parameter.",
											Computed:            true,
										},
										"track_by": dsschema.StringAttribute{
											Description:         "The `track_by` parameter.",
											MarkdownDescription: "The `track_by` parameter.",
											Computed:            true,
										},
									},
								},
								"default": dsschema.BoolAttribute{
									Description:         "The `default` parameter.",
									MarkdownDescription: "The `default` parameter.",
									Computed:            true,
								},
								"drop": dsschema.BoolAttribute{
									Description:         "The `drop` parameter.",
									MarkdownDescription: "The `drop` parameter.",
									Computed:            true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description:         "The `reset_both` parameter.",
									MarkdownDescription: "The `reset_both` parameter.",
									Computed:            true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description:         "The `reset_client` parameter.",
									MarkdownDescription: "The `reset_client` parameter.",
									Computed:            true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description:         "The `reset_server` parameter.",
									MarkdownDescription: "The `reset_server` parameter.",
									Computed:            true,
								},
							},
						},
						"category": dsschema.StringAttribute{
							Description:         "The `category` parameter.",
							MarkdownDescription: "The `category` parameter.",
							Computed:            true,
						},
						"cve": dsschema.ListAttribute{
							Description:         "The `cve` parameter.",
							MarkdownDescription: "The `cve` parameter.",
							Computed:            true,
							ElementType:         types.StringType,
						},
						"host": dsschema.StringAttribute{
							Description:         "The `host` parameter.",
							MarkdownDescription: "The `host` parameter.",
							Computed:            true,
						},
						"name": dsschema.StringAttribute{
							Description:         "The `name` parameter.",
							MarkdownDescription: "The `name` parameter.",
							Computed:            true,
						},
						"packet_capture": dsschema.StringAttribute{
							Description:         "The `packet_capture` parameter.",
							MarkdownDescription: "The `packet_capture` parameter.",
							Computed:            true,
						},
						"severity": dsschema.ListAttribute{
							Description:         "The `severity` parameter.",
							MarkdownDescription: "The `severity` parameter.",
							Computed:            true,
							ElementType:         types.StringType,
						},
						"threat_name": dsschema.StringAttribute{
							Description:         "The `threat_name` parameter.",
							MarkdownDescription: "The `threat_name` parameter.",
							Computed:            true,
						},
						"vendor_id": dsschema.ListAttribute{
							Description:         "The `vendor_id` parameter.",
							MarkdownDescription: "The `vendor_id` parameter.",
							Computed:            true,
							ElementType:         types.StringType,
						},
					},
				},
			},
			"threat_exception": dsschema.ListNestedAttribute{
				Description:         "The `threat_exception` parameter.",
				MarkdownDescription: "The `threat_exception` parameter.",
				Computed:            true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						"action": dsschema.SingleNestedAttribute{
							Description:         "The `action` parameter.",
							MarkdownDescription: "The `action` parameter.",
							Computed:            true,
							Attributes: map[string]dsschema.Attribute{
								"alert": dsschema.BoolAttribute{
									Description:         "The `alert` parameter.",
									MarkdownDescription: "The `alert` parameter.",
									Computed:            true,
								},
								"allow": dsschema.BoolAttribute{
									Description:         "The `allow` parameter.",
									MarkdownDescription: "The `allow` parameter.",
									Computed:            true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description:         "The `block_ip` parameter.",
									MarkdownDescription: "The `block_ip` parameter.",
									Computed:            true,
									Attributes: map[string]dsschema.Attribute{
										"duration": dsschema.Int64Attribute{
											Description:         "The `duration` parameter.",
											MarkdownDescription: "The `duration` parameter.",
											Computed:            true,
										},
										"track_by": dsschema.StringAttribute{
											Description:         "The `track_by` parameter.",
											MarkdownDescription: "The `track_by` parameter.",
											Computed:            true,
										},
									},
								},
								"default": dsschema.BoolAttribute{
									Description:         "The `default` parameter.",
									MarkdownDescription: "The `default` parameter.",
									Computed:            true,
								},
								"drop": dsschema.BoolAttribute{
									Description:         "The `drop` parameter.",
									MarkdownDescription: "The `drop` parameter.",
									Computed:            true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description:         "The `reset_both` parameter.",
									MarkdownDescription: "The `reset_both` parameter.",
									Computed:            true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description:         "The `reset_client` parameter.",
									MarkdownDescription: "The `reset_client` parameter.",
									Computed:            true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description:         "The `reset_server` parameter.",
									MarkdownDescription: "The `reset_server` parameter.",
									Computed:            true,
								},
							},
						},
						"exempt_ip": dsschema.ListNestedAttribute{
							Description:         "The `exempt_ip` parameter.",
							MarkdownDescription: "The `exempt_ip` parameter.",
							Computed:            true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									"name": dsschema.StringAttribute{
										Description:         "The `name` parameter.",
										MarkdownDescription: "The `name` parameter.",
										Computed:            true,
									},
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description:         "The `name` parameter.",
							MarkdownDescription: "The `name` parameter.",
							Computed:            true,
						},
						"notes": dsschema.StringAttribute{
							Description:         "The `notes` parameter.",
							MarkdownDescription: "The `notes` parameter.",
							Computed:            true,
						},
						"packet_capture": dsschema.StringAttribute{
							Description:         "The `packet_capture` parameter.",
							MarkdownDescription: "The `packet_capture` parameter.",
							Computed:            true,
						},
						"time_attribute": dsschema.SingleNestedAttribute{
							Description:         "The `time_attribute` parameter.",
							MarkdownDescription: "The `time_attribute` parameter.",
							Computed:            true,
							Attributes: map[string]dsschema.Attribute{
								"interval": dsschema.Int64Attribute{
									Description:         "The `interval` parameter.",
									MarkdownDescription: "The `interval` parameter.",
									Computed:            true,
								},
								"threshold": dsschema.Int64Attribute{
									Description:         "The `threshold` parameter.",
									MarkdownDescription: "The `threshold` parameter.",
									Computed:            true,
								},
								"track_by": dsschema.StringAttribute{
									Description:         "The `track_by` parameter.",
									MarkdownDescription: "The `track_by` parameter.",
									Computed:            true,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *vulnerabilityProtectionProfilesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*sase.Client)
}

func (d *vulnerabilityProtectionProfilesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state vulnerabilityProtectionProfilesDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source singleton retrieval", map[string]any{
		"terraform_provider_function": "Read",
		"data_source_name":            "sase_vulnerability_protection_profiles",
		"object_id":                   state.ObjectId.ValueString(),
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := sImSpCX.NewClient(d.client)
	input := sImSpCX.ReadInput{
		ObjectId: state.ObjectId.ValueString(),
		Folder:   state.Folder.ValueString(),
	}

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting singleton", err.Error())
		return
	}

	// Store the answer to state.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.ObjectId)
	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)
	state.Id = types.StringValue(idBuilder.String())
	var var0 []vulnerabilityProtectionProfilesDsModelRulesObject
	if len(ans.Rules) != 0 {
		var0 = make([]vulnerabilityProtectionProfilesDsModelRulesObject, 0, len(ans.Rules))
		for var1Index := range ans.Rules {
			var1 := ans.Rules[var1Index]
			var var2 vulnerabilityProtectionProfilesDsModelRulesObject
			var var3 *vulnerabilityProtectionProfilesDsModelActionObject
			if var1.Action != nil {
				var3 = &vulnerabilityProtectionProfilesDsModelActionObject{}
				var var4 *vulnerabilityProtectionProfilesDsModelBlockIpObject
				if var1.Action.BlockIp != nil {
					var4 = &vulnerabilityProtectionProfilesDsModelBlockIpObject{}
					var4.Duration = types.Int64Value(var1.Action.BlockIp.Duration)
					var4.TrackBy = types.StringValue(var1.Action.BlockIp.TrackBy)
				}
				if var1.Action.Alert != nil {
					var3.Alert = types.BoolValue(true)
				}
				if var1.Action.Allow != nil {
					var3.Allow = types.BoolValue(true)
				}
				var3.BlockIp = var4
				if var1.Action.Default != nil {
					var3.Default = types.BoolValue(true)
				}
				if var1.Action.Drop != nil {
					var3.Drop = types.BoolValue(true)
				}
				if var1.Action.ResetBoth != nil {
					var3.ResetBoth = types.BoolValue(true)
				}
				if var1.Action.ResetClient != nil {
					var3.ResetClient = types.BoolValue(true)
				}
				if var1.Action.ResetServer != nil {
					var3.ResetServer = types.BoolValue(true)
				}
			}
			var2.Action = var3
			var2.Category = types.StringValue(var1.Category)
			var2.Cve = EncodeStringSlice(var1.Cve)
			var2.Host = types.StringValue(var1.Host)
			var2.Name = types.StringValue(var1.Name)
			var2.PacketCapture = types.StringValue(var1.PacketCapture)
			var2.Severity = EncodeStringSlice(var1.Severity)
			var2.ThreatName = types.StringValue(var1.ThreatName)
			var2.VendorId = EncodeStringSlice(var1.VendorId)
			var0 = append(var0, var2)
		}
	}
	var var5 []vulnerabilityProtectionProfilesDsModelThreatExceptionObject
	if len(ans.ThreatException) != 0 {
		var5 = make([]vulnerabilityProtectionProfilesDsModelThreatExceptionObject, 0, len(ans.ThreatException))
		for var6Index := range ans.ThreatException {
			var6 := ans.ThreatException[var6Index]
			var var7 vulnerabilityProtectionProfilesDsModelThreatExceptionObject
			var var8 *vulnerabilityProtectionProfilesDsModelActionObject
			if var6.Action != nil {
				var8 = &vulnerabilityProtectionProfilesDsModelActionObject{}
				var var9 *vulnerabilityProtectionProfilesDsModelBlockIpObject
				if var6.Action.BlockIp != nil {
					var9 = &vulnerabilityProtectionProfilesDsModelBlockIpObject{}
					var9.Duration = types.Int64Value(var6.Action.BlockIp.Duration)
					var9.TrackBy = types.StringValue(var6.Action.BlockIp.TrackBy)
				}
				if var6.Action.Alert != nil {
					var8.Alert = types.BoolValue(true)
				}
				if var6.Action.Allow != nil {
					var8.Allow = types.BoolValue(true)
				}
				var8.BlockIp = var9
				if var6.Action.Default != nil {
					var8.Default = types.BoolValue(true)
				}
				if var6.Action.Drop != nil {
					var8.Drop = types.BoolValue(true)
				}
				if var6.Action.ResetBoth != nil {
					var8.ResetBoth = types.BoolValue(true)
				}
				if var6.Action.ResetClient != nil {
					var8.ResetClient = types.BoolValue(true)
				}
				if var6.Action.ResetServer != nil {
					var8.ResetServer = types.BoolValue(true)
				}
			}
			var var10 []vulnerabilityProtectionProfilesDsModelExemptIpObject
			if len(var6.ExemptIp) != 0 {
				var10 = make([]vulnerabilityProtectionProfilesDsModelExemptIpObject, 0, len(var6.ExemptIp))
				for var11Index := range var6.ExemptIp {
					var11 := var6.ExemptIp[var11Index]
					var var12 vulnerabilityProtectionProfilesDsModelExemptIpObject
					var12.Name = types.StringValue(var11.Name)
					var10 = append(var10, var12)
				}
			}
			var var13 *vulnerabilityProtectionProfilesDsModelTimeAttributeObject
			if var6.TimeAttribute != nil {
				var13 = &vulnerabilityProtectionProfilesDsModelTimeAttributeObject{}
				var13.Interval = types.Int64Value(var6.TimeAttribute.Interval)
				var13.Threshold = types.Int64Value(var6.TimeAttribute.Threshold)
				var13.TrackBy = types.StringValue(var6.TimeAttribute.TrackBy)
			}
			var7.Action = var8
			var7.ExemptIp = var10
			var7.Name = types.StringValue(var6.Name)
			var7.Notes = types.StringValue(var6.Notes)
			var7.PacketCapture = types.StringValue(var6.PacketCapture)
			var7.TimeAttribute = var13
			var5 = append(var5, var7)
		}
	}
	state.Description = types.StringValue(ans.Description)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Name = types.StringValue(ans.Name)
	state.Rules = var0
	state.ThreatException = var5

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &vulnerabilityProtectionProfilesResource{}
	_ resource.ResourceWithConfigure   = &vulnerabilityProtectionProfilesResource{}
	_ resource.ResourceWithImportState = &vulnerabilityProtectionProfilesResource{}
)

func NewVulnerabilityProtectionProfilesResource() resource.Resource {
	return &vulnerabilityProtectionProfilesResource{}
}

type vulnerabilityProtectionProfilesResource struct {
	client *sase.Client
}

type vulnerabilityProtectionProfilesRsModel struct {
	Id types.String `tfsdk:"id"`

	// Input.
	Folder types.String `tfsdk:"folder"`

	// Request body input.
	// Ref: #/components/schemas/vulnerability-protection-profiles
	Description     types.String                                                  `tfsdk:"description"`
	ObjectId        types.String                                                  `tfsdk:"object_id"`
	Name            types.String                                                  `tfsdk:"name"`
	Rules           []vulnerabilityProtectionProfilesRsModelRulesObject           `tfsdk:"rules"`
	ThreatException []vulnerabilityProtectionProfilesRsModelThreatExceptionObject `tfsdk:"threat_exception"`
}

type vulnerabilityProtectionProfilesRsModelRulesObject struct {
	Action        *vulnerabilityProtectionProfilesRsModelActionObject `tfsdk:"action"`
	Category      types.String                                        `tfsdk:"category"`
	Cve           []types.String                                      `tfsdk:"cve"`
	Host          types.String                                        `tfsdk:"host"`
	Name          types.String                                        `tfsdk:"name"`
	PacketCapture types.String                                        `tfsdk:"packet_capture"`
	Severity      []types.String                                      `tfsdk:"severity"`
	ThreatName    types.String                                        `tfsdk:"threat_name"`
	VendorId      []types.String                                      `tfsdk:"vendor_id"`
}

type vulnerabilityProtectionProfilesRsModelActionObject struct {
	Alert       types.Bool                                           `tfsdk:"alert"`
	Allow       types.Bool                                           `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfilesRsModelBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                           `tfsdk:"default"`
	Drop        types.Bool                                           `tfsdk:"drop"`
	ResetBoth   types.Bool                                           `tfsdk:"reset_both"`
	ResetClient types.Bool                                           `tfsdk:"reset_client"`
	ResetServer types.Bool                                           `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfilesRsModelBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfilesRsModelThreatExceptionObject struct {
	Action        *vulnerabilityProtectionProfilesRsModelActionObject        `tfsdk:"action"`
	ExemptIp      []vulnerabilityProtectionProfilesRsModelExemptIpObject     `tfsdk:"exempt_ip"`
	Name          types.String                                               `tfsdk:"name"`
	Notes         types.String                                               `tfsdk:"notes"`
	PacketCapture types.String                                               `tfsdk:"packet_capture"`
	TimeAttribute *vulnerabilityProtectionProfilesRsModelTimeAttributeObject `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionProfilesRsModelExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

type vulnerabilityProtectionProfilesRsModelTimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

// Metadata returns the data source type name.
func (r *vulnerabilityProtectionProfilesResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_profiles"
}

// Schema defines the schema for this listing data source.
func (r *vulnerabilityProtectionProfilesResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves config for a specific item.",

		Attributes: map[string]rsschema.Attribute{
			"id": rsschema.StringAttribute{
				Description:         "The object ID.",
				MarkdownDescription: "The object ID.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			// Input.
			"folder": rsschema.StringAttribute{
				Description:         "The folder of the entry. Value must be one of: `\"Shared\"`, `\"Mobile Users\"`, `\"Remote Networks\"`, `\"Service Connections\"`, `\"Mobile Users Container\"`, `\"Mobile Users Explicit Proxy\"`.",
				MarkdownDescription: "The folder of the entry. Value must be one of: `\"Shared\"`, `\"Mobile Users\"`, `\"Remote Networks\"`, `\"Service Connections\"`, `\"Mobile Users Container\"`, `\"Mobile Users Explicit Proxy\"`.",
				Required:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("Shared", "Mobile Users", "Remote Networks", "Service Connections", "Mobile Users Container", "Mobile Users Explicit Proxy"),
				},
			},

			"description": rsschema.StringAttribute{
				Description:         "The `description` parameter.",
				MarkdownDescription: "The `description` parameter.",
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					DefaultString(""),
				},
			},
			"object_id": rsschema.StringAttribute{
				Description:         "The `object_id` parameter.",
				MarkdownDescription: "The `object_id` parameter.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description:         "The `name` parameter.",
				MarkdownDescription: "The `name` parameter.",
				Required:            true,
			},
			"rules": rsschema.ListNestedAttribute{
				Description:         "The `rules` parameter.",
				MarkdownDescription: "The `rules` parameter.",
				Optional:            true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						"action": rsschema.SingleNestedAttribute{
							Description:         "The `action` parameter.",
							MarkdownDescription: "The `action` parameter.",
							Optional:            true,
							Attributes: map[string]rsschema.Attribute{
								"alert": rsschema.BoolAttribute{
									Description:         "The `alert` parameter.",
									MarkdownDescription: "The `alert` parameter.",
									Optional:            true,
								},
								"allow": rsschema.BoolAttribute{
									Description:         "The `allow` parameter.",
									MarkdownDescription: "The `allow` parameter.",
									Optional:            true,
								},
								"block_ip": rsschema.SingleNestedAttribute{
									Description:         "The `block_ip` parameter.",
									MarkdownDescription: "The `block_ip` parameter.",
									Optional:            true,
									Attributes: map[string]rsschema.Attribute{
										"duration": rsschema.Int64Attribute{
											Description:         "The `duration` parameter. Value must be between 1 and 3600.",
											MarkdownDescription: "The `duration` parameter. Value must be between 1 and 3600.",
											Optional:            true,
											Computed:            true,
											PlanModifiers: []planmodifier.Int64{
												DefaultInt64(0),
											},
											Validators: []validator.Int64{
												int64validator.Between(1, 3600),
											},
										},
										"track_by": rsschema.StringAttribute{
											Description:         "The `track_by` parameter. Value must be one of: `\"source-and-destination\"`, `\"source\"`.",
											MarkdownDescription: "The `track_by` parameter. Value must be one of: `\"source-and-destination\"`, `\"source\"`.",
											Optional:            true,
											Computed:            true,
											PlanModifiers: []planmodifier.String{
												DefaultString(""),
											},
											Validators: []validator.String{
												stringvalidator.OneOf("source-and-destination", "source"),
											},
										},
									},
								},
								"default": rsschema.BoolAttribute{
									Description:         "The `default` parameter.",
									MarkdownDescription: "The `default` parameter.",
									Optional:            true,
								},
								"drop": rsschema.BoolAttribute{
									Description:         "The `drop` parameter.",
									MarkdownDescription: "The `drop` parameter.",
									Optional:            true,
								},
								"reset_both": rsschema.BoolAttribute{
									Description:         "The `reset_both` parameter.",
									MarkdownDescription: "The `reset_both` parameter.",
									Optional:            true,
								},
								"reset_client": rsschema.BoolAttribute{
									Description:         "The `reset_client` parameter.",
									MarkdownDescription: "The `reset_client` parameter.",
									Optional:            true,
								},
								"reset_server": rsschema.BoolAttribute{
									Description:         "The `reset_server` parameter.",
									MarkdownDescription: "The `reset_server` parameter.",
									Optional:            true,
								},
							},
						},
						"category": rsschema.StringAttribute{
							Description:         "The `category` parameter. Value must be one of: `\"any\"`, `\"brute-force\"`, `\"code-execution\"`, `\"code-obfuscation\"`, `\"command-execution\"`, `\"dos\"`, `\"exploit-kit\"`, `\"info-leak\"`, `\"insecure-credentials\"`, `\"overflow\"`, `\"phishing\"`, `\"protocol-anomaly\"`, `\"scan\"`, `\"sql-injection\"`.",
							MarkdownDescription: "The `category` parameter. Value must be one of: `\"any\"`, `\"brute-force\"`, `\"code-execution\"`, `\"code-obfuscation\"`, `\"command-execution\"`, `\"dos\"`, `\"exploit-kit\"`, `\"info-leak\"`, `\"insecure-credentials\"`, `\"overflow\"`, `\"phishing\"`, `\"protocol-anomaly\"`, `\"scan\"`, `\"sql-injection\"`.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("any", "brute-force", "code-execution", "code-obfuscation", "command-execution", "dos", "exploit-kit", "info-leak", "insecure-credentials", "overflow", "phishing", "protocol-anomaly", "scan", "sql-injection"),
							},
						},
						"cve": rsschema.ListAttribute{
							Description:         "The `cve` parameter.",
							MarkdownDescription: "The `cve` parameter.",
							Optional:            true,
							ElementType:         types.StringType,
						},
						"host": rsschema.StringAttribute{
							Description:         "The `host` parameter.",
							MarkdownDescription: "The `host` parameter.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
						},
						"name": rsschema.StringAttribute{
							Description:         "The `name` parameter.",
							MarkdownDescription: "The `name` parameter.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
						},
						"packet_capture": rsschema.StringAttribute{
							Description:         "The `packet_capture` parameter. Value must be one of: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							MarkdownDescription: "The `packet_capture` parameter. Value must be one of: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
							},
						},
						"severity": rsschema.ListAttribute{
							Description:         "The `severity` parameter.",
							MarkdownDescription: "The `severity` parameter.",
							Optional:            true,
							ElementType:         types.StringType,
						},
						"threat_name": rsschema.StringAttribute{
							Description:         "The `threat_name` parameter.",
							MarkdownDescription: "The `threat_name` parameter.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
						},
						"vendor_id": rsschema.ListAttribute{
							Description:         "The `vendor_id` parameter.",
							MarkdownDescription: "The `vendor_id` parameter.",
							Optional:            true,
							ElementType:         types.StringType,
						},
					},
				},
			},
			"threat_exception": rsschema.ListNestedAttribute{
				Description:         "The `threat_exception` parameter.",
				MarkdownDescription: "The `threat_exception` parameter.",
				Optional:            true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						"action": rsschema.SingleNestedAttribute{
							Description:         "The `action` parameter.",
							MarkdownDescription: "The `action` parameter.",
							Optional:            true,
							Attributes: map[string]rsschema.Attribute{
								"alert": rsschema.BoolAttribute{
									Description:         "The `alert` parameter.",
									MarkdownDescription: "The `alert` parameter.",
									Optional:            true,
								},
								"allow": rsschema.BoolAttribute{
									Description:         "The `allow` parameter.",
									MarkdownDescription: "The `allow` parameter.",
									Optional:            true,
								},
								"block_ip": rsschema.SingleNestedAttribute{
									Description:         "The `block_ip` parameter.",
									MarkdownDescription: "The `block_ip` parameter.",
									Optional:            true,
									Attributes: map[string]rsschema.Attribute{
										"duration": rsschema.Int64Attribute{
											Description:         "The `duration` parameter. Value must be between 1 and 3600.",
											MarkdownDescription: "The `duration` parameter. Value must be between 1 and 3600.",
											Optional:            true,
											Computed:            true,
											PlanModifiers: []planmodifier.Int64{
												DefaultInt64(0),
											},
											Validators: []validator.Int64{
												int64validator.Between(1, 3600),
											},
										},
										"track_by": rsschema.StringAttribute{
											Description:         "The `track_by` parameter. Value must be one of: `\"source-and-destination\"`, `\"source\"`.",
											MarkdownDescription: "The `track_by` parameter. Value must be one of: `\"source-and-destination\"`, `\"source\"`.",
											Optional:            true,
											Computed:            true,
											PlanModifiers: []planmodifier.String{
												DefaultString(""),
											},
											Validators: []validator.String{
												stringvalidator.OneOf("source-and-destination", "source"),
											},
										},
									},
								},
								"default": rsschema.BoolAttribute{
									Description:         "The `default` parameter.",
									MarkdownDescription: "The `default` parameter.",
									Optional:            true,
								},
								"drop": rsschema.BoolAttribute{
									Description:         "The `drop` parameter.",
									MarkdownDescription: "The `drop` parameter.",
									Optional:            true,
								},
								"reset_both": rsschema.BoolAttribute{
									Description:         "The `reset_both` parameter.",
									MarkdownDescription: "The `reset_both` parameter.",
									Optional:            true,
								},
								"reset_client": rsschema.BoolAttribute{
									Description:         "The `reset_client` parameter.",
									MarkdownDescription: "The `reset_client` parameter.",
									Optional:            true,
								},
								"reset_server": rsschema.BoolAttribute{
									Description:         "The `reset_server` parameter.",
									MarkdownDescription: "The `reset_server` parameter.",
									Optional:            true,
								},
							},
						},
						"exempt_ip": rsschema.ListNestedAttribute{
							Description:         "The `exempt_ip` parameter.",
							MarkdownDescription: "The `exempt_ip` parameter.",
							Optional:            true,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									"name": rsschema.StringAttribute{
										Description:         "The `name` parameter.",
										MarkdownDescription: "The `name` parameter.",
										Required:            true,
									},
								},
							},
						},
						"name": rsschema.StringAttribute{
							Description:         "The `name` parameter.",
							MarkdownDescription: "The `name` parameter.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
						},
						"notes": rsschema.StringAttribute{
							Description:         "The `notes` parameter.",
							MarkdownDescription: "The `notes` parameter.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
						},
						"packet_capture": rsschema.StringAttribute{
							Description:         "The `packet_capture` parameter. Value must be one of: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							MarkdownDescription: "The `packet_capture` parameter. Value must be one of: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Optional:            true,
							Computed:            true,
							PlanModifiers: []planmodifier.String{
								DefaultString(""),
							},
							Validators: []validator.String{
								stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
							},
						},
						"time_attribute": rsschema.SingleNestedAttribute{
							Description:         "The `time_attribute` parameter.",
							MarkdownDescription: "The `time_attribute` parameter.",
							Optional:            true,
							Attributes: map[string]rsschema.Attribute{
								"interval": rsschema.Int64Attribute{
									Description:         "The `interval` parameter. Value must be between 1 and 3600.",
									MarkdownDescription: "The `interval` parameter. Value must be between 1 and 3600.",
									Optional:            true,
									Computed:            true,
									PlanModifiers: []planmodifier.Int64{
										DefaultInt64(0),
									},
									Validators: []validator.Int64{
										int64validator.Between(1, 3600),
									},
								},
								"threshold": rsschema.Int64Attribute{
									Description:         "The `threshold` parameter. Value must be between 1 and 65535.",
									MarkdownDescription: "The `threshold` parameter. Value must be between 1 and 65535.",
									Optional:            true,
									Computed:            true,
									PlanModifiers: []planmodifier.Int64{
										DefaultInt64(0),
									},
									Validators: []validator.Int64{
										int64validator.Between(1, 65535),
									},
								},
								"track_by": rsschema.StringAttribute{
									Description:         "The `track_by` parameter. Value must be one of: `\"source\"`, `\"destination\"`, `\"source-and-destination\"`.",
									MarkdownDescription: "The `track_by` parameter. Value must be one of: `\"source\"`, `\"destination\"`, `\"source-and-destination\"`.",
									Optional:            true,
									Computed:            true,
									PlanModifiers: []planmodifier.String{
										DefaultString(""),
									},
									Validators: []validator.String{
										stringvalidator.OneOf("source", "destination", "source-and-destination"),
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *vulnerabilityProtectionProfilesResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*sase.Client)
}

// Create resource
func (r *vulnerabilityProtectionProfilesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state vulnerabilityProtectionProfilesRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"terraform_provider_function": "Create",
		"resource_name":               "sase_vulnerability_protection_profiles",
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to create the config.
	svc := sImSpCX.NewClient(r.client)
	input := sImSpCX.CreateInput{
		Folder: state.Folder.ValueString(),
	}
	var var0 mGmzwhO.Config
	var0.Description = state.Description.ValueString()
	var0.Name = state.Name.ValueString()
	var var1 []mGmzwhO.RulesObject
	if len(state.Rules) != 0 {
		var1 = make([]mGmzwhO.RulesObject, 0, len(state.Rules))
		for var2Index := range state.Rules {
			var2 := state.Rules[var2Index]
			var var3 mGmzwhO.RulesObject
			var var4 *mGmzwhO.ActionObject
			if var2.Action != nil {
				var4 = &mGmzwhO.ActionObject{}
				if var2.Action.Alert.ValueBool() {
					var4.Alert = struct{}{}
				}
				if var2.Action.Allow.ValueBool() {
					var4.Allow = struct{}{}
				}
				var var5 *mGmzwhO.BlockIpObject
				if var2.Action.BlockIp != nil {
					var5 = &mGmzwhO.BlockIpObject{}
					var5.Duration = var2.Action.BlockIp.Duration.ValueInt64()
					var5.TrackBy = var2.Action.BlockIp.TrackBy.ValueString()
				}
				var4.BlockIp = var5
				if var2.Action.Default.ValueBool() {
					var4.Default = struct{}{}
				}
				if var2.Action.Drop.ValueBool() {
					var4.Drop = struct{}{}
				}
				if var2.Action.ResetBoth.ValueBool() {
					var4.ResetBoth = struct{}{}
				}
				if var2.Action.ResetClient.ValueBool() {
					var4.ResetClient = struct{}{}
				}
				if var2.Action.ResetServer.ValueBool() {
					var4.ResetServer = struct{}{}
				}
			}
			var3.Action = var4
			var3.Category = var2.Category.ValueString()
			var3.Cve = DecodeStringSlice(var2.Cve)
			var3.Host = var2.Host.ValueString()
			var3.Name = var2.Name.ValueString()
			var3.PacketCapture = var2.PacketCapture.ValueString()
			var3.Severity = DecodeStringSlice(var2.Severity)
			var3.ThreatName = var2.ThreatName.ValueString()
			var3.VendorId = DecodeStringSlice(var2.VendorId)
			var1 = append(var1, var3)
		}
	}
	var0.Rules = var1
	var var6 []mGmzwhO.ThreatExceptionObject
	if len(state.ThreatException) != 0 {
		var6 = make([]mGmzwhO.ThreatExceptionObject, 0, len(state.ThreatException))
		for var7Index := range state.ThreatException {
			var7 := state.ThreatException[var7Index]
			var var8 mGmzwhO.ThreatExceptionObject
			var var9 *mGmzwhO.ActionObject
			if var7.Action != nil {
				var9 = &mGmzwhO.ActionObject{}
				if var7.Action.Alert.ValueBool() {
					var9.Alert = struct{}{}
				}
				if var7.Action.Allow.ValueBool() {
					var9.Allow = struct{}{}
				}
				var var10 *mGmzwhO.BlockIpObject
				if var7.Action.BlockIp != nil {
					var10 = &mGmzwhO.BlockIpObject{}
					var10.Duration = var7.Action.BlockIp.Duration.ValueInt64()
					var10.TrackBy = var7.Action.BlockIp.TrackBy.ValueString()
				}
				var9.BlockIp = var10
				if var7.Action.Default.ValueBool() {
					var9.Default = struct{}{}
				}
				if var7.Action.Drop.ValueBool() {
					var9.Drop = struct{}{}
				}
				if var7.Action.ResetBoth.ValueBool() {
					var9.ResetBoth = struct{}{}
				}
				if var7.Action.ResetClient.ValueBool() {
					var9.ResetClient = struct{}{}
				}
				if var7.Action.ResetServer.ValueBool() {
					var9.ResetServer = struct{}{}
				}
			}
			var8.Action = var9
			var var11 []mGmzwhO.ExemptIpObject
			if len(var7.ExemptIp) != 0 {
				var11 = make([]mGmzwhO.ExemptIpObject, 0, len(var7.ExemptIp))
				for var12Index := range var7.ExemptIp {
					var12 := var7.ExemptIp[var12Index]
					var var13 mGmzwhO.ExemptIpObject
					var13.Name = var12.Name.ValueString()
					var11 = append(var11, var13)
				}
			}
			var8.ExemptIp = var11
			var8.Name = var7.Name.ValueString()
			var8.Notes = var7.Notes.ValueString()
			var8.PacketCapture = var7.PacketCapture.ValueString()
			var var14 *mGmzwhO.TimeAttributeObject
			if var7.TimeAttribute != nil {
				var14 = &mGmzwhO.TimeAttributeObject{}
				var14.Interval = var7.TimeAttribute.Interval.ValueInt64()
				var14.Threshold = var7.TimeAttribute.Threshold.ValueInt64()
				var14.TrackBy = var7.TimeAttribute.TrackBy.ValueString()
			}
			var8.TimeAttribute = var14
			var6 = append(var6, var8)
		}
	}
	var0.ThreatException = var6
	input.Config = var0

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Store the answer to state.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)
	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(ans.ObjectId)
	state.Id = types.StringValue(idBuilder.String())
	var var15 []vulnerabilityProtectionProfilesRsModelRulesObject
	if len(ans.Rules) != 0 {
		var15 = make([]vulnerabilityProtectionProfilesRsModelRulesObject, 0, len(ans.Rules))
		for var16Index := range ans.Rules {
			var16 := ans.Rules[var16Index]
			var var17 vulnerabilityProtectionProfilesRsModelRulesObject
			var var18 *vulnerabilityProtectionProfilesRsModelActionObject
			if var16.Action != nil {
				var18 = &vulnerabilityProtectionProfilesRsModelActionObject{}
				var var19 *vulnerabilityProtectionProfilesRsModelBlockIpObject
				if var16.Action.BlockIp != nil {
					var19 = &vulnerabilityProtectionProfilesRsModelBlockIpObject{}
					var19.Duration = types.Int64Value(var16.Action.BlockIp.Duration)
					var19.TrackBy = types.StringValue(var16.Action.BlockIp.TrackBy)
				}
				if var16.Action.Alert != nil {
					var18.Alert = types.BoolValue(true)
				}
				if var16.Action.Allow != nil {
					var18.Allow = types.BoolValue(true)
				}
				var18.BlockIp = var19
				if var16.Action.Default != nil {
					var18.Default = types.BoolValue(true)
				}
				if var16.Action.Drop != nil {
					var18.Drop = types.BoolValue(true)
				}
				if var16.Action.ResetBoth != nil {
					var18.ResetBoth = types.BoolValue(true)
				}
				if var16.Action.ResetClient != nil {
					var18.ResetClient = types.BoolValue(true)
				}
				if var16.Action.ResetServer != nil {
					var18.ResetServer = types.BoolValue(true)
				}
			}
			var17.Action = var18
			var17.Category = types.StringValue(var16.Category)
			var17.Cve = EncodeStringSlice(var16.Cve)
			var17.Host = types.StringValue(var16.Host)
			var17.Name = types.StringValue(var16.Name)
			var17.PacketCapture = types.StringValue(var16.PacketCapture)
			var17.Severity = EncodeStringSlice(var16.Severity)
			var17.ThreatName = types.StringValue(var16.ThreatName)
			var17.VendorId = EncodeStringSlice(var16.VendorId)
			var15 = append(var15, var17)
		}
	}
	var var20 []vulnerabilityProtectionProfilesRsModelThreatExceptionObject
	if len(ans.ThreatException) != 0 {
		var20 = make([]vulnerabilityProtectionProfilesRsModelThreatExceptionObject, 0, len(ans.ThreatException))
		for var21Index := range ans.ThreatException {
			var21 := ans.ThreatException[var21Index]
			var var22 vulnerabilityProtectionProfilesRsModelThreatExceptionObject
			var var23 *vulnerabilityProtectionProfilesRsModelActionObject
			if var21.Action != nil {
				var23 = &vulnerabilityProtectionProfilesRsModelActionObject{}
				var var24 *vulnerabilityProtectionProfilesRsModelBlockIpObject
				if var21.Action.BlockIp != nil {
					var24 = &vulnerabilityProtectionProfilesRsModelBlockIpObject{}
					var24.Duration = types.Int64Value(var21.Action.BlockIp.Duration)
					var24.TrackBy = types.StringValue(var21.Action.BlockIp.TrackBy)
				}
				if var21.Action.Alert != nil {
					var23.Alert = types.BoolValue(true)
				}
				if var21.Action.Allow != nil {
					var23.Allow = types.BoolValue(true)
				}
				var23.BlockIp = var24
				if var21.Action.Default != nil {
					var23.Default = types.BoolValue(true)
				}
				if var21.Action.Drop != nil {
					var23.Drop = types.BoolValue(true)
				}
				if var21.Action.ResetBoth != nil {
					var23.ResetBoth = types.BoolValue(true)
				}
				if var21.Action.ResetClient != nil {
					var23.ResetClient = types.BoolValue(true)
				}
				if var21.Action.ResetServer != nil {
					var23.ResetServer = types.BoolValue(true)
				}
			}
			var var25 []vulnerabilityProtectionProfilesRsModelExemptIpObject
			if len(var21.ExemptIp) != 0 {
				var25 = make([]vulnerabilityProtectionProfilesRsModelExemptIpObject, 0, len(var21.ExemptIp))
				for var26Index := range var21.ExemptIp {
					var26 := var21.ExemptIp[var26Index]
					var var27 vulnerabilityProtectionProfilesRsModelExemptIpObject
					var27.Name = types.StringValue(var26.Name)
					var25 = append(var25, var27)
				}
			}
			var var28 *vulnerabilityProtectionProfilesRsModelTimeAttributeObject
			if var21.TimeAttribute != nil {
				var28 = &vulnerabilityProtectionProfilesRsModelTimeAttributeObject{}
				var28.Interval = types.Int64Value(var21.TimeAttribute.Interval)
				var28.Threshold = types.Int64Value(var21.TimeAttribute.Threshold)
				var28.TrackBy = types.StringValue(var21.TimeAttribute.TrackBy)
			}
			var22.Action = var23
			var22.ExemptIp = var25
			var22.Name = types.StringValue(var21.Name)
			var22.Notes = types.StringValue(var21.Notes)
			var22.PacketCapture = types.StringValue(var21.PacketCapture)
			var22.TimeAttribute = var28
			var20 = append(var20, var22)
		}
	}
	state.Description = types.StringValue(ans.Description)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Name = types.StringValue(ans.Name)
	state.Rules = var15
	state.ThreatException = var20

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read resource.
func (r *vulnerabilityProtectionProfilesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("id"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := idType.ValueString()
	tokens := strings.Split(id, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	var state vulnerabilityProtectionProfilesRsModel

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "sase_vulnerability_protection_profiles",
		"locMap":                      map[string]int{"Folder": 0, "ObjectId": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := sImSpCX.NewClient(r.client)
	input := sImSpCX.ReadInput{
		ObjectId: tokens[1],
		Folder:   tokens[0],
	}

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.
	state.Folder = types.StringValue(tokens[0])
	state.Id = idType
	var var0 []vulnerabilityProtectionProfilesRsModelRulesObject
	if len(ans.Rules) != 0 {
		var0 = make([]vulnerabilityProtectionProfilesRsModelRulesObject, 0, len(ans.Rules))
		for var1Index := range ans.Rules {
			var1 := ans.Rules[var1Index]
			var var2 vulnerabilityProtectionProfilesRsModelRulesObject
			var var3 *vulnerabilityProtectionProfilesRsModelActionObject
			if var1.Action != nil {
				var3 = &vulnerabilityProtectionProfilesRsModelActionObject{}
				var var4 *vulnerabilityProtectionProfilesRsModelBlockIpObject
				if var1.Action.BlockIp != nil {
					var4 = &vulnerabilityProtectionProfilesRsModelBlockIpObject{}
					var4.Duration = types.Int64Value(var1.Action.BlockIp.Duration)
					var4.TrackBy = types.StringValue(var1.Action.BlockIp.TrackBy)
				}
				if var1.Action.Alert != nil {
					var3.Alert = types.BoolValue(true)
				}
				if var1.Action.Allow != nil {
					var3.Allow = types.BoolValue(true)
				}
				var3.BlockIp = var4
				if var1.Action.Default != nil {
					var3.Default = types.BoolValue(true)
				}
				if var1.Action.Drop != nil {
					var3.Drop = types.BoolValue(true)
				}
				if var1.Action.ResetBoth != nil {
					var3.ResetBoth = types.BoolValue(true)
				}
				if var1.Action.ResetClient != nil {
					var3.ResetClient = types.BoolValue(true)
				}
				if var1.Action.ResetServer != nil {
					var3.ResetServer = types.BoolValue(true)
				}
			}
			var2.Action = var3
			var2.Category = types.StringValue(var1.Category)
			var2.Cve = EncodeStringSlice(var1.Cve)
			var2.Host = types.StringValue(var1.Host)
			var2.Name = types.StringValue(var1.Name)
			var2.PacketCapture = types.StringValue(var1.PacketCapture)
			var2.Severity = EncodeStringSlice(var1.Severity)
			var2.ThreatName = types.StringValue(var1.ThreatName)
			var2.VendorId = EncodeStringSlice(var1.VendorId)
			var0 = append(var0, var2)
		}
	}
	var var5 []vulnerabilityProtectionProfilesRsModelThreatExceptionObject
	if len(ans.ThreatException) != 0 {
		var5 = make([]vulnerabilityProtectionProfilesRsModelThreatExceptionObject, 0, len(ans.ThreatException))
		for var6Index := range ans.ThreatException {
			var6 := ans.ThreatException[var6Index]
			var var7 vulnerabilityProtectionProfilesRsModelThreatExceptionObject
			var var8 *vulnerabilityProtectionProfilesRsModelActionObject
			if var6.Action != nil {
				var8 = &vulnerabilityProtectionProfilesRsModelActionObject{}
				var var9 *vulnerabilityProtectionProfilesRsModelBlockIpObject
				if var6.Action.BlockIp != nil {
					var9 = &vulnerabilityProtectionProfilesRsModelBlockIpObject{}
					var9.Duration = types.Int64Value(var6.Action.BlockIp.Duration)
					var9.TrackBy = types.StringValue(var6.Action.BlockIp.TrackBy)
				}
				if var6.Action.Alert != nil {
					var8.Alert = types.BoolValue(true)
				}
				if var6.Action.Allow != nil {
					var8.Allow = types.BoolValue(true)
				}
				var8.BlockIp = var9
				if var6.Action.Default != nil {
					var8.Default = types.BoolValue(true)
				}
				if var6.Action.Drop != nil {
					var8.Drop = types.BoolValue(true)
				}
				if var6.Action.ResetBoth != nil {
					var8.ResetBoth = types.BoolValue(true)
				}
				if var6.Action.ResetClient != nil {
					var8.ResetClient = types.BoolValue(true)
				}
				if var6.Action.ResetServer != nil {
					var8.ResetServer = types.BoolValue(true)
				}
			}
			var var10 []vulnerabilityProtectionProfilesRsModelExemptIpObject
			if len(var6.ExemptIp) != 0 {
				var10 = make([]vulnerabilityProtectionProfilesRsModelExemptIpObject, 0, len(var6.ExemptIp))
				for var11Index := range var6.ExemptIp {
					var11 := var6.ExemptIp[var11Index]
					var var12 vulnerabilityProtectionProfilesRsModelExemptIpObject
					var12.Name = types.StringValue(var11.Name)
					var10 = append(var10, var12)
				}
			}
			var var13 *vulnerabilityProtectionProfilesRsModelTimeAttributeObject
			if var6.TimeAttribute != nil {
				var13 = &vulnerabilityProtectionProfilesRsModelTimeAttributeObject{}
				var13.Interval = types.Int64Value(var6.TimeAttribute.Interval)
				var13.Threshold = types.Int64Value(var6.TimeAttribute.Threshold)
				var13.TrackBy = types.StringValue(var6.TimeAttribute.TrackBy)
			}
			var7.Action = var8
			var7.ExemptIp = var10
			var7.Name = types.StringValue(var6.Name)
			var7.Notes = types.StringValue(var6.Notes)
			var7.PacketCapture = types.StringValue(var6.PacketCapture)
			var7.TimeAttribute = var13
			var5 = append(var5, var7)
		}
	}
	state.Description = types.StringValue(ans.Description)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Name = types.StringValue(ans.Name)
	state.Rules = var0
	state.ThreatException = var5

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update resource.
func (r *vulnerabilityProtectionProfilesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state vulnerabilityProtectionProfilesRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "sase_vulnerability_protection_profiles",
		"object_id":                   state.ObjectId.ValueString(),
	})

	// Prepare to create the config.
	svc := sImSpCX.NewClient(r.client)
	input := sImSpCX.UpdateInput{
		ObjectId: state.ObjectId.ValueString(),
	}
	var var0 mGmzwhO.Config
	var0.Description = plan.Description.ValueString()
	var0.Name = plan.Name.ValueString()
	var var1 []mGmzwhO.RulesObject
	if len(plan.Rules) != 0 {
		var1 = make([]mGmzwhO.RulesObject, 0, len(plan.Rules))
		for var2Index := range plan.Rules {
			var2 := plan.Rules[var2Index]
			var var3 mGmzwhO.RulesObject
			var var4 *mGmzwhO.ActionObject
			if var2.Action != nil {
				var4 = &mGmzwhO.ActionObject{}
				if var2.Action.Alert.ValueBool() {
					var4.Alert = struct{}{}
				}
				if var2.Action.Allow.ValueBool() {
					var4.Allow = struct{}{}
				}
				var var5 *mGmzwhO.BlockIpObject
				if var2.Action.BlockIp != nil {
					var5 = &mGmzwhO.BlockIpObject{}
					var5.Duration = var2.Action.BlockIp.Duration.ValueInt64()
					var5.TrackBy = var2.Action.BlockIp.TrackBy.ValueString()
				}
				var4.BlockIp = var5
				if var2.Action.Default.ValueBool() {
					var4.Default = struct{}{}
				}
				if var2.Action.Drop.ValueBool() {
					var4.Drop = struct{}{}
				}
				if var2.Action.ResetBoth.ValueBool() {
					var4.ResetBoth = struct{}{}
				}
				if var2.Action.ResetClient.ValueBool() {
					var4.ResetClient = struct{}{}
				}
				if var2.Action.ResetServer.ValueBool() {
					var4.ResetServer = struct{}{}
				}
			}
			var3.Action = var4
			var3.Category = var2.Category.ValueString()
			var3.Cve = DecodeStringSlice(var2.Cve)
			var3.Host = var2.Host.ValueString()
			var3.Name = var2.Name.ValueString()
			var3.PacketCapture = var2.PacketCapture.ValueString()
			var3.Severity = DecodeStringSlice(var2.Severity)
			var3.ThreatName = var2.ThreatName.ValueString()
			var3.VendorId = DecodeStringSlice(var2.VendorId)
			var1 = append(var1, var3)
		}
	}
	var0.Rules = var1
	var var6 []mGmzwhO.ThreatExceptionObject
	if len(plan.ThreatException) != 0 {
		var6 = make([]mGmzwhO.ThreatExceptionObject, 0, len(plan.ThreatException))
		for var7Index := range plan.ThreatException {
			var7 := plan.ThreatException[var7Index]
			var var8 mGmzwhO.ThreatExceptionObject
			var var9 *mGmzwhO.ActionObject
			if var7.Action != nil {
				var9 = &mGmzwhO.ActionObject{}
				if var7.Action.Alert.ValueBool() {
					var9.Alert = struct{}{}
				}
				if var7.Action.Allow.ValueBool() {
					var9.Allow = struct{}{}
				}
				var var10 *mGmzwhO.BlockIpObject
				if var7.Action.BlockIp != nil {
					var10 = &mGmzwhO.BlockIpObject{}
					var10.Duration = var7.Action.BlockIp.Duration.ValueInt64()
					var10.TrackBy = var7.Action.BlockIp.TrackBy.ValueString()
				}
				var9.BlockIp = var10
				if var7.Action.Default.ValueBool() {
					var9.Default = struct{}{}
				}
				if var7.Action.Drop.ValueBool() {
					var9.Drop = struct{}{}
				}
				if var7.Action.ResetBoth.ValueBool() {
					var9.ResetBoth = struct{}{}
				}
				if var7.Action.ResetClient.ValueBool() {
					var9.ResetClient = struct{}{}
				}
				if var7.Action.ResetServer.ValueBool() {
					var9.ResetServer = struct{}{}
				}
			}
			var8.Action = var9
			var var11 []mGmzwhO.ExemptIpObject
			if len(var7.ExemptIp) != 0 {
				var11 = make([]mGmzwhO.ExemptIpObject, 0, len(var7.ExemptIp))
				for var12Index := range var7.ExemptIp {
					var12 := var7.ExemptIp[var12Index]
					var var13 mGmzwhO.ExemptIpObject
					var13.Name = var12.Name.ValueString()
					var11 = append(var11, var13)
				}
			}
			var8.ExemptIp = var11
			var8.Name = var7.Name.ValueString()
			var8.Notes = var7.Notes.ValueString()
			var8.PacketCapture = var7.PacketCapture.ValueString()
			var var14 *mGmzwhO.TimeAttributeObject
			if var7.TimeAttribute != nil {
				var14 = &mGmzwhO.TimeAttributeObject{}
				var14.Interval = var7.TimeAttribute.Interval.ValueInt64()
				var14.Threshold = var7.TimeAttribute.Threshold.ValueInt64()
				var14.TrackBy = var7.TimeAttribute.TrackBy.ValueString()
			}
			var8.TimeAttribute = var14
			var6 = append(var6, var8)
		}
	}
	var0.ThreatException = var6
	input.Config = var0

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Store the answer to state.
	var var15 []vulnerabilityProtectionProfilesRsModelRulesObject
	if len(ans.Rules) != 0 {
		var15 = make([]vulnerabilityProtectionProfilesRsModelRulesObject, 0, len(ans.Rules))
		for var16Index := range ans.Rules {
			var16 := ans.Rules[var16Index]
			var var17 vulnerabilityProtectionProfilesRsModelRulesObject
			var var18 *vulnerabilityProtectionProfilesRsModelActionObject
			if var16.Action != nil {
				var18 = &vulnerabilityProtectionProfilesRsModelActionObject{}
				var var19 *vulnerabilityProtectionProfilesRsModelBlockIpObject
				if var16.Action.BlockIp != nil {
					var19 = &vulnerabilityProtectionProfilesRsModelBlockIpObject{}
					var19.Duration = types.Int64Value(var16.Action.BlockIp.Duration)
					var19.TrackBy = types.StringValue(var16.Action.BlockIp.TrackBy)
				}
				if var16.Action.Alert != nil {
					var18.Alert = types.BoolValue(true)
				}
				if var16.Action.Allow != nil {
					var18.Allow = types.BoolValue(true)
				}
				var18.BlockIp = var19
				if var16.Action.Default != nil {
					var18.Default = types.BoolValue(true)
				}
				if var16.Action.Drop != nil {
					var18.Drop = types.BoolValue(true)
				}
				if var16.Action.ResetBoth != nil {
					var18.ResetBoth = types.BoolValue(true)
				}
				if var16.Action.ResetClient != nil {
					var18.ResetClient = types.BoolValue(true)
				}
				if var16.Action.ResetServer != nil {
					var18.ResetServer = types.BoolValue(true)
				}
			}
			var17.Action = var18
			var17.Category = types.StringValue(var16.Category)
			var17.Cve = EncodeStringSlice(var16.Cve)
			var17.Host = types.StringValue(var16.Host)
			var17.Name = types.StringValue(var16.Name)
			var17.PacketCapture = types.StringValue(var16.PacketCapture)
			var17.Severity = EncodeStringSlice(var16.Severity)
			var17.ThreatName = types.StringValue(var16.ThreatName)
			var17.VendorId = EncodeStringSlice(var16.VendorId)
			var15 = append(var15, var17)
		}
	}
	var var20 []vulnerabilityProtectionProfilesRsModelThreatExceptionObject
	if len(ans.ThreatException) != 0 {
		var20 = make([]vulnerabilityProtectionProfilesRsModelThreatExceptionObject, 0, len(ans.ThreatException))
		for var21Index := range ans.ThreatException {
			var21 := ans.ThreatException[var21Index]
			var var22 vulnerabilityProtectionProfilesRsModelThreatExceptionObject
			var var23 *vulnerabilityProtectionProfilesRsModelActionObject
			if var21.Action != nil {
				var23 = &vulnerabilityProtectionProfilesRsModelActionObject{}
				var var24 *vulnerabilityProtectionProfilesRsModelBlockIpObject
				if var21.Action.BlockIp != nil {
					var24 = &vulnerabilityProtectionProfilesRsModelBlockIpObject{}
					var24.Duration = types.Int64Value(var21.Action.BlockIp.Duration)
					var24.TrackBy = types.StringValue(var21.Action.BlockIp.TrackBy)
				}
				if var21.Action.Alert != nil {
					var23.Alert = types.BoolValue(true)
				}
				if var21.Action.Allow != nil {
					var23.Allow = types.BoolValue(true)
				}
				var23.BlockIp = var24
				if var21.Action.Default != nil {
					var23.Default = types.BoolValue(true)
				}
				if var21.Action.Drop != nil {
					var23.Drop = types.BoolValue(true)
				}
				if var21.Action.ResetBoth != nil {
					var23.ResetBoth = types.BoolValue(true)
				}
				if var21.Action.ResetClient != nil {
					var23.ResetClient = types.BoolValue(true)
				}
				if var21.Action.ResetServer != nil {
					var23.ResetServer = types.BoolValue(true)
				}
			}
			var var25 []vulnerabilityProtectionProfilesRsModelExemptIpObject
			if len(var21.ExemptIp) != 0 {
				var25 = make([]vulnerabilityProtectionProfilesRsModelExemptIpObject, 0, len(var21.ExemptIp))
				for var26Index := range var21.ExemptIp {
					var26 := var21.ExemptIp[var26Index]
					var var27 vulnerabilityProtectionProfilesRsModelExemptIpObject
					var27.Name = types.StringValue(var26.Name)
					var25 = append(var25, var27)
				}
			}
			var var28 *vulnerabilityProtectionProfilesRsModelTimeAttributeObject
			if var21.TimeAttribute != nil {
				var28 = &vulnerabilityProtectionProfilesRsModelTimeAttributeObject{}
				var28.Interval = types.Int64Value(var21.TimeAttribute.Interval)
				var28.Threshold = types.Int64Value(var21.TimeAttribute.Threshold)
				var28.TrackBy = types.StringValue(var21.TimeAttribute.TrackBy)
			}
			var22.Action = var23
			var22.ExemptIp = var25
			var22.Name = types.StringValue(var21.Name)
			var22.Notes = types.StringValue(var21.Notes)
			var22.PacketCapture = types.StringValue(var21.PacketCapture)
			var22.TimeAttribute = var28
			var20 = append(var20, var22)
		}
	}
	state.Description = types.StringValue(ans.Description)
	state.ObjectId = types.StringValue(ans.ObjectId)
	state.Name = types.StringValue(ans.Name)
	state.Rules = var15
	state.ThreatException = var20

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete resource.
func (r *vulnerabilityProtectionProfilesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("id"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	id := idType.ValueString()
	tokens := strings.Split(id, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "sase_vulnerability_protection_profiles",
		"locMap":                      map[string]int{"Folder": 0, "ObjectId": 1},
		"tokens":                      tokens,
	})

	svc := sImSpCX.NewClient(r.client)
	input := sImSpCX.DeleteInput{
		ObjectId: tokens[1],
	}

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *vulnerabilityProtectionProfilesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
